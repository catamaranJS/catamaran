"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(r,n,t){return n&&e(r.prototype,n),t&&e(r,t),r}}(),Carousel=function(){function e(r){var n=arguments.length<=1||void 0===arguments[1]?{speed:4,fadeIn:!0,fadeDelay:250}:arguments[1];_classCallCheck(this,e),this._settings=n,this._selectorArr=document.querySelectorAll(r),this._elmArr=new CATAMARAN.core.DOM(r),this.init()}return _createClass(e,[{key:"init",value:function(){function e(){l=f[0].scrollWidth;var e=new CATAMARAN.core.DOM(".forward"),r=new CATAMARAN.core.DOM(".backward");CATAMARAN.isMobile()?(f[0].className=f[0].className+" caroselTouch",f[0].scrollLeft=0,e.hide(),r.hide()):(f[0].setAttribute("style","overflow:visible"),f[0].scrollLeft=0,e.show(),r.show()),A._update()}for(var r=this,n=0,t=r._selectorArr.length;t>n;n++){var a,o,s,l,i,c=new CATAMARAN.core.DOM("."+r._elmArr[n].className),A=r._selectorArr[n],d='<span class="forward"></span>',u='<span class="backward"></span>',f=A.querySelectorAll(".reel"),w=A.querySelectorAll("article"),v=0;if(r._settings.fadeIn){for(var n=0,t=w.length;t>n;n++)w[n].classList.add("loading");c.onVisible(function(){var e,n=w.length-Math.ceil(window.innerWidth/s);e=window.setInterval(function(){var r=A.querySelectorAll(".loading"),t=r[0];if(r.length<=n){window.clearInterval(e);for(var a=0,o=w.length;o>a;a++)w[a].classList.remove("loading")}else"undefined"!=typeof t&&t.classList.remove("loading")},r._settings.fadeDelay)},50)}A._update=function(){v=0,o=-1*l+window.innerWidth,a=0,A._updatePos()},A._updatePos=function(){f[0].setAttribute("style","transform:translate("+v+"px, 0); -moz-transform:translate("+v+"px, 0); -webkit-transform:translate("+v+"px, 0)")},A.insertAdjacentHTML("beforeEnd",d);var h=new CATAMARAN.core.DOM(".forward");h.hide(),CATAMARAN.core.Events.on(".forward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v-=r._settings.speed,o>=v&&(window.clearInterval(CATAMARAN.core.interval),v=o),A._updatePos()},10)}),CATAMARAN.core.Events.on(".forward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),A.insertAdjacentHTML("beforeEnd",u);var M=new CATAMARAN.core.DOM(".backward");M.hide(),CATAMARAN.core.Events.on(".backward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v+=r._settings.speed,v>=a&&(window.clearInterval(i),v=a),A._updatePos()},10)}),CATAMARAN.core.Events.on(".backward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),e(),CATAMARAN.core.Events.on("body","resize",function(r){e()})}}}]),e}();module.exports=Carousel;
//# sourceMappingURL=data:application/json;base64,