"use strict";function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n}}(),Carousel=function(){function e(n){var r=void 0===arguments[1]?{speed:4,fadeIn:!0,fadeDelay:250}:arguments[1];_classCallCheck(this,e),this._settings=r,this._selectorArr=document.querySelectorAll(n),this._elmArr=new CATAMARAN.core.DOM(n),this.init()}return _createClass(e,[{key:"init",value:function(){function e(){l=f[0].scrollWidth;var e=new CATAMARAN.core.DOM(".forward"),n=new CATAMARAN.core.DOM(".backward");CATAMARAN.isMobile()?(console.log(f[0]),f[0].className=f[0].className+" caroselTouch",f[0].scrollLeft=0,e.hide(),n.hide()):(f[0].setAttribute("style","overflow:visible"),f[0].scrollLeft=0,e.show(),n.show()),A._update()}for(var n=this,r=0,t=n._selectorArr.length;t>r;r++){var o,a,s,l,i,c=new CATAMARAN.core.DOM("."+n._elmArr[r].className),A=n._selectorArr[r],d='<span class="forward"></span>',u='<span class="backward"></span>',f=A.querySelectorAll(".reel"),w=A.querySelectorAll("article"),v=0;if(n._settings.fadeIn){for(var r=0,t=w.length;t>r;r++)w[r].classList.add("loading");c.onVisible(function(){var e,r=w.length-Math.ceil(window.innerWidth/s);e=window.setInterval(function(){var n=A.querySelectorAll(".loading"),t=n[0];if(n.length<=r){window.clearInterval(e);for(var o=0,a=w.length;a>o;o++)w[o].classList.remove("loading")}else"undefined"!=typeof t&&t.classList.remove("loading")},n._settings.fadeDelay)},50)}A._update=function(){v=0,a=-1*l+window.innerWidth,o=0,A._updatePos()},A._updatePos=function(){f[0].setAttribute("style","transform:translate("+v+"px, 0)")},A.insertAdjacentHTML("beforeEnd",d);var M=new CATAMARAN.core.DOM(".forward");M.hide(),CATAMARAN.core.Events.on(".forward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v-=n._settings.speed,a>=v&&(window.clearInterval(CATAMARAN.core.interval),v=a),A._updatePos()},10)}),CATAMARAN.core.Events.on(".forward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),A.insertAdjacentHTML("beforeEnd",u);var h=new CATAMARAN.core.DOM(".backward");h.hide(),CATAMARAN.core.Events.on(".backward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v+=n._settings.speed,v>=o&&(window.clearInterval(i),v=o),A._updatePos()},10)}),CATAMARAN.core.Events.on(".backward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),e(),CATAMARAN.core.Events.on("body","resize",function(n){e()})}}}]),e}();module.exports=Carousel;
//# sourceMappingURL=data:application/json;base64,