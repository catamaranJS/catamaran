"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(e){if(void 0===e||null===e)throw new TypeError("Cannot convert first argument to object");for(var t=Object(e),n=1;n<arguments.length;n++){var r=arguments[n];if(void 0!==r&&null!==r){r=Object(r);for(var i=Object.keys(Object(r)),a=0,s=i.length;s>a;a++){var o=i[a],u=Object.getOwnPropertyDescriptor(r,o);void 0!==u&&u.enumerable&&(t[o]=r[o])}}}return t}}),Array.from||(Array.from=function(){var e=Object.prototype.toString,t=function(t){return"function"==typeof t||"[object Function]"===e.call(t)},n=function(e){var t=Number(e);return isNaN(t)?0:0!==t&&isFinite(t)?(t>0?1:-1)*Math.floor(Math.abs(t)):t},r=Math.pow(2,53)-1,i=function(e){var t=n(e);return Math.min(Math.max(t,0),r)};return function(e){var n=this,r=Object(e);if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a,s=arguments.length>1?arguments[1]:void 0;if("undefined"!=typeof s){if(!t(s))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}for(var o,u=i(r.length),l=t(n)?Object(new n(u)):new Array(u),c=0;u>c;)o=r[c],l[c]=s?"undefined"==typeof a?s(o,c):s.call(a,o,c):o,c+=1;return l.length=u,l}}());var DOM=function(){function e(t){_classCallCheck(this,e);var n=document.querySelectorAll(t);this.length=n.length,this.children=[],Object.assign(this,n)}return _createClass(e,[{key:"each",value:function(e){var t=!0,n=!1,r=void 0;try{for(var i,a=Array.from(this)[Symbol.iterator]();!(t=(i=a.next()).done);t=!0){var s=i.value;e.call(s)}}catch(o){n=!0,r=o}finally{try{!t&&a["return"]&&a["return"]()}finally{if(n)throw r}}return this}},{key:"hide",value:function(){return this.each(function(){this.style.display="none"})}},{key:"show",value:function(){return this.each(function(){this.style.display="block"})}},{key:"onVisible",value:function(e){return this.each(function(){if(CATAMARAN.core.DOM.isVisible(this))e.call(this);else var t=setInterval(function(){CATAMARAN.core.DOM.isVisible(this)&&(e.call(this),clearInterval(t))},50)})}},{key:"addClass",value:function(e){return this.each(function(){this.classList.add(e)})}},{key:"removeClass",value:function(e){return this.each(function(){this.classList.remove(e)})}},{key:"hasClass",value:function(e){return this[0].classList.contains(e)}},{key:"toggle",value:function(e){var t=this;return this.each(function(){this.classList.contains(e)?t.removeClass(e):t.addClass(e)})}},{key:"on",value:function(e,t){return this.each(function(){this.addEventListener(e,t,!1)})}},{key:"off",value:function(e,t){return this.each(function(){this.removeEventListener(e,t,!1)})}},{key:"width",value:function(){var e=void 0===arguments[0]?null:arguments[0],t=e;return null==t?this[0].offsetWidth:this.each(function(){this.style.width=t})}},{key:"height",value:function(){var e=void 0===arguments[0]?null:arguments[0],t=e;return null==t?this[0].offsetHeight:this.each(function(){this.style.height=t})}},{key:"css",value:function(e){var t=e;return this.each(function(){for(var e in t)this.style[e]=t[e]})}}],[{key:"isVisible",value:function(e){return e.offsetWidth>0&&e.offsetHeight>0}}]),e}();module.exports=DOM;
//# sourceMappingURL=data:application/json;base64,