"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var a=t[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,s,a){return s&&e(t.prototype,s),a&&e(t,a),t}}(),CES=require("ces"),BABYLON=require("../lib/babylon"),utils=require("../utils/utils"),defaults=utils.defaultArgs();defaults._name="material";var c_material=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];switch(_classCallCheck(this,e),this.name=t._name+utils.guid(),this.obj=null,this._opts=t,t._type){case"Standard":this.StandardMaterial();break;case"Shader":break;case"Dynamic":break;case"Fresenel":break;case"PBR":break;default:this.StandardMaterial()}this.options={name:this.name,init:this.constructor,obj:this.obj},CES.Component.extend(this.options)}return _createClass(e,[{key:"StandardMaterial",value:function(){this.obj=new BABYLON.StandardMaterial("texturePlane",this._opts._scene),null!=this._opts._texture&&(this.obj.diffuseTexture=this._opts._texture,this.obj.diffuseTexture.uScale=this._opts._uScale,this.obj.diffuseTexture.vScale=this._opts._vScale,this.obj.backFaceCulling=this._opts._backFaceCulling,this.obj.diffuseTexture.vOffset=this._opts._vOffset,this.obj.diffuseTexture.uOffset=this._opts._uOffset,this.obj.diffuseTexture.hasAlpha=this._opts._hasAlpha),null!=this._opts._diffuseColor&&(this.obj.diffuseColor=this._opts._diffuseColor)}}]),e}();module.exports=c_material;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL2NvbXBvbmVudHMvY19tYXRlcmlhbC5qcyJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIkNFUyIsInJlcXVpcmUiLCJCQUJZTE9OIiwidXRpbHMiLCJkZWZhdWx0cyIsImRlZmF1bHRBcmdzIiwiX25hbWUiLCJjX21hdGVyaWFsIiwiX29wdHMiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJ0aGlzIiwibmFtZSIsImd1aWQiLCJvYmoiLCJfdHlwZSIsIlN0YW5kYXJkTWF0ZXJpYWwiLCJvcHRpb25zIiwiaW5pdCIsImNvbnN0cnVjdG9yIiwiQ29tcG9uZW50IiwiZXh0ZW5kIiwidmFsdWUiLCJfc2NlbmUiLCJfdGV4dHVyZSIsImRpZmZ1c2VUZXh0dXJlIiwidVNjYWxlIiwiX3VTY2FsZSIsInZTY2FsZSIsIl92U2NhbGUiLCJiYWNrRmFjZUN1bGxpbmciLCJfYmFja0ZhY2VDdWxsaW5nIiwidk9mZnNldCIsIl92T2Zmc2V0IiwidU9mZnNldCIsIl91T2Zmc2V0IiwiaGFzQWxwaGEiLCJfaGFzQWxwaGEiLCJfZGlmZnVzZUNvbG9yIiwiZGlmZnVzZUNvbG9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFJQSxTQUFTQSxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FGaEgsR0FBSUMsY0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSUMsR0FBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQUUsR0FBSUUsR0FBYUgsRUFBTUMsRUFBSUUsR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNQyxPQUFPQyxlQUFlVCxFQUFRSSxFQUFXTSxJQUFLTixJQUFpQixNQUFPLFVBQVVSLEVBQWFlLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZWixFQUFpQkgsRUFBWWlCLFVBQVdGLEdBQWlCQyxHQUFhYixFQUFpQkgsRUFBYWdCLEdBQXFCaEIsTUFGN2hCa0IsSUFBTUMsUUFBUSxPQUNkQyxRQUFVRCxRQUFRLGtCQUNsQkUsTUFBUUYsUUFBUSxrQkFDaEJHLFNBQVdELE1BQU1FLGFBQ3JCRCxVQUFTRSxNQUFRLFVBY2pCLElBUE1DLFlBQVUsV0FDSixRQUROQSxLQVNKLEdBUldDLEdBQUtDLFVBQUFwQixRQUFBLEdBQUFxQixTQUFBRCxVQUFBLEdBQUdMLFNBQVFLLFVBQUEsRUFJM0IsUUFNQTdCLGdCQUFnQitCLEtBWFpKLEdBRUpJLEtBQUtDLEtBQU9KLEVBQU1GLE1BQVFILE1BQU1VLE9BQ2hDRixLQUFLRyxJQUFNLEtBQ1hILEtBQUtILE1BQVFBLEVBQ05BLEVBQU1PLE9BQ1QsSUFBSyxXQUNKSixLQUFLSyxrQkFDRixNQUNKLEtBQUssU0FHRCxLQUNKLEtBQUssVUFFRCxLQUNKLEtBQUssV0FFRCxLQUNKLEtBQUssTUFFRCxLQUNKLFNBQ0lMLEtBQUtLLG1CQUViTCxLQUFLTSxTQUNKTCxLQUFLRCxLQUFLQyxLQUNWTSxLQUFNUCxLQUFLUSxZQUNYTCxJQUFJSCxLQUFLRyxLQUVWZCxJQUFJb0IsVUFBVUMsT0FBT1YsS0FBS00sU0FrQzNCLE1BcEJBakMsY0E1Q0t1QixJQTZDSlgsSUFBSyxtQkFDTDBCLE1BYmUsV0FDZlgsS0FBS0csSUFBTSxHQUFJWixTQUFRYyxpQkFBaUIsZUFBZ0JMLEtBQUtILE1BQU1lLFFBQ3pDLE1BQXZCWixLQUFLSCxNQUFNZ0IsV0FDYmIsS0FBS0csSUFBSVcsZUFBaUJkLEtBQUtILE1BQU1nQixTQUNyQ2IsS0FBS0csSUFBSVcsZUFBZUMsT0FBU2YsS0FBS0gsTUFBTW1CLFFBQzVDaEIsS0FBS0csSUFBSVcsZUFBZUcsT0FBU2pCLEtBQUtILE1BQU1xQixRQUM1Q2xCLEtBQUtHLElBQUlnQixnQkFBa0JuQixLQUFLSCxNQUFNdUIsaUJBQ3RDcEIsS0FBS0csSUFBSVcsZUFBZU8sUUFBVXJCLEtBQUtILE1BQU15QixTQUMxQ3RCLEtBQUtHLElBQUlXLGVBQWVTLFFBQVV2QixLQUFLSCxNQUFNMkIsU0FDN0N4QixLQUFLRyxJQUFJVyxlQUFlVyxTQUFXekIsS0FBS0gsTUFBTTZCLFdBSWhCLE1BQTVCMUIsS0FBS0gsTUFBTThCLGdCQUNiM0IsS0FBS0csSUFBSXlCLGFBQWM1QixLQUFLSCxNQUFNOEIsbUJBL0NsQy9CLElBb0ROaUMsUUFBT0MsUUFBVWxDIiwiZmlsZSI6ImNvcmUvbHNkL2NvbXBvbmVudHMvY19tYXRlcmlhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBDRVMgPSByZXF1aXJlKCdjZXMnKTtcbnZhciBCQUJZTE9OID0gcmVxdWlyZSgnLi4vbGliL2JhYnlsb24nKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSB1dGlscy5kZWZhdWx0QXJncygpO1xuZGVmYXVsdHMuX25hbWUgPSAnbWF0ZXJpYWwnO1xuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgQnJlbmRvbiBTbWl0aFxuICogaHR0cDovL3NlYWNsb3VkOS5vcmdcbiAqIExpZ2h0V2VpZ2h0IDNEIFN5c3RlbSBEZXNpZ24gZW5naW5lXG4gKi9cbmNsYXNzIGNfbWF0ZXJpYWwge1xuXHRjb25zdHJ1Y3Rvcihfb3B0cyA9IGRlZmF1bHRzKXtcblx0XHR0aGlzLm5hbWUgPSBfb3B0cy5fbmFtZSArIHV0aWxzLmd1aWQoKTtcblx0XHR0aGlzLm9iaiA9IG51bGw7XG5cdFx0dGhpcy5fb3B0cyA9IF9vcHRzO1xuXHRcdHN3aXRjaChfb3B0cy5fdHlwZSkge1xuXHRcdCAgICBjYXNlICdTdGFuZGFyZCc6XG5cdFx0ICAgIFx0dGhpcy5TdGFuZGFyZE1hdGVyaWFsKCk7XG5cdFx0ICAgICAgICBicmVhaztcblx0XHQgICAgY2FzZSAnU2hhZGVyJzpcblx0XHQgICAgICAgIC8vdG9kb1xuXHRcdFx0XHRcblx0XHQgICAgICAgIGJyZWFrO1xuXHRcdCAgICBjYXNlICdEeW5hbWljJzpcblx0XHQgICAgICAgIC8vdG9kb1xuXHRcdCAgICAgICAgYnJlYWs7XHRcblx0XHQgICAgY2FzZSAnRnJlc2VuZWwnOlxuXHRcdCAgICAgICAgLy90b2RvXG5cdFx0ICAgICAgICBicmVhaztcblx0XHQgICAgY2FzZSAnUEJSJzpcblx0XHQgICAgICAgIC8vdG9kb1xuXHRcdCAgICAgICAgYnJlYWs7ICAgIFx0ICAgIFx0ICAgICAgICAgICAgICAgIFxuXHRcdCAgICBkZWZhdWx0OlxuXHRcdCAgICAgICAgdGhpcy5TdGFuZGFyZE1hdGVyaWFsKCk7XG5cdFx0IH1cblx0XHR0aGlzLm9wdGlvbnMgPSB7XG5cdFx0XHRuYW1lOnRoaXMubmFtZSAsXG5cdFx0XHRpbml0OiB0aGlzLmNvbnN0cnVjdG9yLFxuXHRcdFx0b2JqOnRoaXMub2JqXG5cdFx0fVxuXHRcdENFUy5Db21wb25lbnQuZXh0ZW5kKHRoaXMub3B0aW9ucyk7XG5cdH1cblxuXHRTdGFuZGFyZE1hdGVyaWFsKCl7XG5cdFx0dGhpcy5vYmogPSBuZXcgQkFCWUxPTi5TdGFuZGFyZE1hdGVyaWFsKFwidGV4dHVyZVBsYW5lXCIsIHRoaXMuX29wdHMuX3NjZW5lKTtcblx0XHRpZih0aGlzLl9vcHRzLl90ZXh0dXJlICE9IG51bGwpe1xuXHRcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUgPSB0aGlzLl9vcHRzLl90ZXh0dXJlO1xuXHRcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUudVNjYWxlID0gdGhpcy5fb3B0cy5fdVNjYWxlOy8vUmVwZWF0IDUgdGltZXMgb24gdGhlIFZlcnRpY2FsIEF4ZXNcblx0XHRcdHRoaXMub2JqLmRpZmZ1c2VUZXh0dXJlLnZTY2FsZSA9IHRoaXMuX29wdHMuX3ZTY2FsZTsvL1JlcGVhdCA1IHRpbWVzIG9uIHRoZSBIb3Jpem9udGFsIEF4ZXNcblx0XHRcdHRoaXMub2JqLmJhY2tGYWNlQ3VsbGluZyA9IHRoaXMuX29wdHMuX2JhY2tGYWNlQ3VsbGluZzsvL0Fsd2F5cyBzaG93IHRoZSBmcm9udCBhbmQgdGhlIGJhY2sgb2YgYW4gZWxlbWVudFxuXHRcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUudk9mZnNldCA9IHRoaXMuX29wdHMuX3ZPZmZzZXQ7Ly9WZXJ0aWNhbCBvZmZzZXQgb2YgMTAlXG4gICAgXHRcdHRoaXMub2JqLmRpZmZ1c2VUZXh0dXJlLnVPZmZzZXQgPSB0aGlzLl9vcHRzLl91T2Zmc2V0Oy8vSG9yaXpvbnRhbCBvZmZzZXQgb2YgNDAlXG4gICAgXHRcdHRoaXMub2JqLmRpZmZ1c2VUZXh0dXJlLmhhc0FscGhhID0gdGhpcy5fb3B0cy5faGFzQWxwaGE7XG5cdFx0fVxuXHRcdFxuXHRcdFxuICAgIFx0aWYodGhpcy5fb3B0cy5fZGlmZnVzZUNvbG9yICE9IG51bGwpe1xuICAgIFx0XHR0aGlzLm9iai5kaWZmdXNlQ29sb3IgPXRoaXMuX29wdHMuX2RpZmZ1c2VDb2xvcjtcbiAgICBcdH1cblx0fVxuXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNfbWF0ZXJpYWw7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9