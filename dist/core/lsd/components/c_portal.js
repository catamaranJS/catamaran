"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var CES=require("ces"),BABYLON=require("../lib/babylon"),utils=require("../utils/utils"),defaults=utils.defaultArgs();defaults._name="portal";var c_portal=function e(){var t=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];_classCallCheck(this,e),this.name=t._name+utils.guid(),this.scene=t._scene,this.obj=null,this.plane=null,this.hadFired=!1,this.portalImg=t._portalImg,BABYLON.SceneLoader.ImportMesh("","/assets/scene/","portal.babylon",this.scene,function(e){this.obj=e[0],this.obj.scaling.x=this.obj.scaling.y=this.obj.scaling.z=3,this.plane=BABYLON.Mesh.CreatePlane("plane",.5,scene),this.plane.position.y=1,this.plane.parent=e[0],e[1].parent=e[0],e[2].parent=e[0],e[3].parent=e[0];for(var s=0;s<e.length;s++)e[s].checkCollisions=!0;var i=new BABYLON.StandardMaterial("portalImg",this.scene);i.diffuseTexture=new BABYLON.Texture(this.portalImg,this.scene),i.backFaceCulling=!1,this.plane.material=i,this.obj.layerMask=parseInt(t._layerMask),this.obj.isPickable=t._isPickable,this.obj.position=t._position,this.obj.rotation=t._rotation,this.options={name:this.name,init:this.constructor,plane:this.plane,obj:this.obj};for(var s=0;s<this.scene.cameras.length;s++)this.scene.cameras[s].onCollide=function(s){s.uniqueId!=e[2].uniqueId||this.hadFired||(this.hadFired=!0,window.location=t._href)};CES.Component.extend(this.options)}.bind(this))};module.exports=c_portal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL2NvbXBvbmVudHMvY19wb3J0YWwuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIkNFUyIsInJlcXVpcmUiLCJCQUJZTE9OIiwidXRpbHMiLCJkZWZhdWx0cyIsImRlZmF1bHRBcmdzIiwiX25hbWUiLCJjX3BvcnRhbCIsIl9vcHRzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidGhpcyIsIm5hbWUiLCJndWlkIiwic2NlbmUiLCJfc2NlbmUiLCJvYmoiLCJwbGFuZSIsImhhZEZpcmVkIiwicG9ydGFsSW1nIiwiX3BvcnRhbEltZyIsIlNjZW5lTG9hZGVyIiwiSW1wb3J0TWVzaCIsIm5ld01lc2hlcyIsInNjYWxpbmciLCJ4IiwieSIsInoiLCJNZXNoIiwiQ3JlYXRlUGxhbmUiLCJwb3NpdGlvbiIsInBhcmVudCIsImkiLCJjaGVja0NvbGxpc2lvbnMiLCJtYXRlcmlhbFBsYW5lIiwiU3RhbmRhcmRNYXRlcmlhbCIsImRpZmZ1c2VUZXh0dXJlIiwiVGV4dHVyZSIsImJhY2tGYWNlQ3VsbGluZyIsIm1hdGVyaWFsIiwibGF5ZXJNYXNrIiwicGFyc2VJbnQiLCJfbGF5ZXJNYXNrIiwiaXNQaWNrYWJsZSIsIl9pc1BpY2thYmxlIiwiX3Bvc2l0aW9uIiwicm90YXRpb24iLCJfcm90YXRpb24iLCJvcHRpb25zIiwiaW5pdCIsImNvbnN0cnVjdG9yIiwiY2FtZXJhcyIsIm9uQ29sbGlkZSIsImNvbE1lc2giLCJ1bmlxdWVJZCIsIndpbmRvdyIsImxvY2F0aW9uIiwiX2hyZWYiLCJDb21wb25lbnQiLCJleHRlbmQiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFFQSxTQUFTQSxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FGaEgsR0FBSUMsS0FBTUMsUUFBUSxPQUNkQyxRQUFVRCxRQUFRLGtCQUNsQkUsTUFBUUYsUUFBUSxrQkFDaEJHLFNBQVdELE1BQU1FLGFBQ3JCRCxVQUFTRSxNQUFRLFFBWWpCLElBTE1DLFVBQ00sUUFETkEsS0FNTCxHQUxZQyxHQUFLQyxVQUFBQyxRQUFBLEdBQUFDLFNBQUFGLFVBQUEsR0FBR0wsU0FBUUssVUFBQSxFQU81QmIsaUJBQWdCZ0IsS0FSWEwsR0FFSkssS0FBS0MsS0FBT0wsRUFBTUYsTUFBUUgsTUFBTVcsT0FDaENGLEtBQUtHLE1BQVNQLEVBQU1RLE9BQ3BCSixLQUFLSyxJQUFNLEtBQ1hMLEtBQUtNLE1BQVEsS0FDYk4sS0FBS08sVUFBVyxFQUNoQlAsS0FBS1EsVUFBWVosRUFBTWEsV0FDdkJuQixRQUFRb0IsWUFBWUMsV0FBVyxHQUFJLGlCQUFrQixpQkFBa0JYLEtBQUtHLE1BQVEsU0FBVVMsR0FDaEZaLEtBQUtLLElBQU9PLEVBQVUsR0FDdEJaLEtBQUtLLElBQUlRLFFBQVFDLEVBQUlkLEtBQUtLLElBQUlRLFFBQVFFLEVBQUlmLEtBQUtLLElBQUlRLFFBQVFHLEVBQUksRUFDL0RoQixLQUFLTSxNQUFRaEIsUUFBUTJCLEtBQUtDLFlBQVksUUFBUyxHQUFLZixPQUN2REgsS0FBS00sTUFBTWEsU0FBU0osRUFBSyxFQUN6QmYsS0FBS00sTUFBTWMsT0FBU1IsRUFBVSxHQUM5QkEsRUFBVSxHQUFHUSxPQUFTUixFQUFVLEdBQ2hDQSxFQUFVLEdBQUdRLE9BQVNSLEVBQVUsR0FDaENBLEVBQVUsR0FBR1EsT0FBU1IsRUFBVSxFQUNoQyxLQUFJLEdBQUlTLEdBQUksRUFBR0EsRUFBSVQsRUFBVWQsT0FBUXVCLElBQ3BDVCxFQUFVUyxHQUFHQyxpQkFBa0IsQ0FFaEMsSUFBSUMsR0FBZ0IsR0FBSWpDLFNBQVFrQyxpQkFBaUIsWUFBYXhCLEtBQUtHLE1BQ25Fb0IsR0FBY0UsZUFBaUIsR0FBSW5DLFNBQVFvQyxRQUFRMUIsS0FBS1EsVUFBV1IsS0FBS0csT0FDeEVvQixFQUFjSSxpQkFBa0IsRUFDaEMzQixLQUFLTSxNQUFNc0IsU0FBV0wsRUFDdEJ2QixLQUFLSyxJQUFJd0IsVUFBWUMsU0FBU2xDLEVBQU1tQyxZQUM3Qy9CLEtBQUtLLElBQUkyQixXQUFhcEMsRUFBTXFDLFlBQzVCakMsS0FBS0ssSUFBSWMsU0FBV3ZCLEVBQU1zQyxVQUMxQmxDLEtBQUtLLElBQUk4QixTQUFXdkMsRUFBTXdDLFVBQzFCcEMsS0FBS3FDLFNBQ0pwQyxLQUFLRCxLQUFLQyxLQUNWcUMsS0FBTXRDLEtBQUt1QyxZQUNYakMsTUFBT04sS0FBS00sTUFDWkQsSUFBSUwsS0FBS0ssSUFFVixLQUFJLEdBQUlnQixHQUFJLEVBQUdBLEVBQUlyQixLQUFLRyxNQUFNcUMsUUFBUTFDLE9BQVF1QixJQUM3Q3JCLEtBQUtHLE1BQU1xQyxRQUFRbkIsR0FBR29CLFVBQVksU0FBVUMsR0FDdkNBLEVBQVFDLFVBQVkvQixFQUFVLEdBQUcrQixVQUFhM0MsS0FBS08sV0FDdERQLEtBQUtPLFVBQVcsRUFDaEJxQyxPQUFPQyxTQUFXakQsRUFBTWtELE9BSTNCMUQsS0FBSTJELFVBQVVDLE9BQU9oRCxLQUFLcUMsVUFDbkJZLEtBQUtqRCxPQUloQmtELFFBQU9DLFFBQVV4RCIsImZpbGUiOiJjb3JlL2xzZC9jb21wb25lbnRzL2NfcG9ydGFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIENFUyA9IHJlcXVpcmUoJ2NlcycpO1xudmFyIEJBQllMT04gPSByZXF1aXJlKCcuLi9saWIvYmFieWxvbicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHV0aWxzLmRlZmF1bHRBcmdzKCk7XG5kZWZhdWx0cy5fbmFtZSA9ICdwb3J0YWwnO1xuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgQnJlbmRvbiBTbWl0aFxuICogaHR0cDovL3NlYWNsb3VkOS5vcmdcbiAqIExpZ2h0V2VpZ2h0IDNEIFN5c3RlbSBEZXNpZ24gZW5naW5lXG4gKi9cbmNsYXNzIGNfcG9ydGFsIHtcblx0Y29uc3RydWN0b3IoX29wdHMgPSBkZWZhdWx0cyl7XG5cdFx0dGhpcy5uYW1lID0gX29wdHMuX25hbWUgKyB1dGlscy5ndWlkKCk7XG5cdFx0dGhpcy5zY2VuZSA9ICBfb3B0cy5fc2NlbmU7XG5cdFx0dGhpcy5vYmogPSBudWxsO1xuXHRcdHRoaXMucGxhbmUgPSBudWxsO1xuXHRcdHRoaXMuaGFkRmlyZWQgPSBmYWxzZTtcblx0XHR0aGlzLnBvcnRhbEltZyA9IF9vcHRzLl9wb3J0YWxJbWc7XG5cdFx0QkFCWUxPTi5TY2VuZUxvYWRlci5JbXBvcnRNZXNoKFwiXCIsIFwiL2Fzc2V0cy9zY2VuZS9cIiwgXCJwb3J0YWwuYmFieWxvblwiLCB0aGlzLnNjZW5lICwgZnVuY3Rpb24gKG5ld01lc2hlcykge1xuICAgICAgICAgICAgICAgIHRoaXMub2JqICA9IG5ld01lc2hlc1swXTtcbiAgICAgICAgICAgICAgICB0aGlzLm9iai5zY2FsaW5nLnggPSB0aGlzLm9iai5zY2FsaW5nLnkgPSB0aGlzLm9iai5zY2FsaW5nLnogPSAzO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhbmUgPSBCQUJZTE9OLk1lc2guQ3JlYXRlUGxhbmUoXCJwbGFuZVwiLCAwLjUsIHNjZW5lKTtcbiAgICAgICAgICAgIFx0dGhpcy5wbGFuZS5wb3NpdGlvbi55ID0gIDE7XG4gICAgICAgICAgICBcdHRoaXMucGxhbmUucGFyZW50ID0gbmV3TWVzaGVzWzBdO1xuICAgICAgICAgICAgXHRuZXdNZXNoZXNbMV0ucGFyZW50ID0gbmV3TWVzaGVzWzBdO1xuICAgICAgICAgICAgXHRuZXdNZXNoZXNbMl0ucGFyZW50ID0gbmV3TWVzaGVzWzBdO1xuICAgICAgICAgICAgXHRuZXdNZXNoZXNbM10ucGFyZW50ID0gbmV3TWVzaGVzWzBdO1xuICAgICAgICAgICAgXHRmb3IobGV0IGkgPSAwOyBpIDwgbmV3TWVzaGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIFx0XHRuZXdNZXNoZXNbaV0uY2hlY2tDb2xsaXNpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIFx0fVxuXHQgICAgICAgICAgICB2YXIgbWF0ZXJpYWxQbGFuZSA9IG5ldyBCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwoXCJwb3J0YWxJbWdcIiwgdGhpcy5zY2VuZSk7XG5cdCAgICAgICAgICAgIG1hdGVyaWFsUGxhbmUuZGlmZnVzZVRleHR1cmUgPSBuZXcgQkFCWUxPTi5UZXh0dXJlKHRoaXMucG9ydGFsSW1nLCB0aGlzLnNjZW5lKTtcblx0ICAgICAgICAgICAgbWF0ZXJpYWxQbGFuZS5iYWNrRmFjZUN1bGxpbmcgPSBmYWxzZTtcblx0ICAgICAgICAgICAgdGhpcy5wbGFuZS5tYXRlcmlhbCA9IG1hdGVyaWFsUGxhbmU7XG5cdCAgICAgICAgICAgIHRoaXMub2JqLmxheWVyTWFzayA9IHBhcnNlSW50KF9vcHRzLl9sYXllck1hc2spO1xuXHRcdFx0XHR0aGlzLm9iai5pc1BpY2thYmxlID0gX29wdHMuX2lzUGlja2FibGU7XG5cdFx0XHRcdHRoaXMub2JqLnBvc2l0aW9uID0gX29wdHMuX3Bvc2l0aW9uO1xuXHRcdFx0XHR0aGlzLm9iai5yb3RhdGlvbiA9IF9vcHRzLl9yb3RhdGlvbjtcblx0XHRcdFx0dGhpcy5vcHRpb25zID0ge1xuXHRcdFx0XHRcdG5hbWU6dGhpcy5uYW1lICxcblx0XHRcdFx0XHRpbml0OiB0aGlzLmNvbnN0cnVjdG9yLFxuXHRcdFx0XHRcdHBsYW5lOiB0aGlzLnBsYW5lLFxuXHRcdFx0XHRcdG9iajp0aGlzLm9ialxuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnNjZW5lLmNhbWVyYXMubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdHRoaXMuc2NlbmUuY2FtZXJhc1tpXS5vbkNvbGxpZGUgPSBmdW5jdGlvbiAoY29sTWVzaCkge1xuXHRcdFx0XHRcdFx0aWYgKGNvbE1lc2gudW5pcXVlSWQgPT0gbmV3TWVzaGVzWzJdLnVuaXF1ZUlkICYmICF0aGlzLmhhZEZpcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaGFkRmlyZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24gPSBfb3B0cy5faHJlZjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XHRcblx0XHRcdFx0fVxuXHRcdFx0XHRDRVMuQ29tcG9uZW50LmV4dGVuZCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgfS5iaW5kKHRoaXMpKTtcblx0fVxuXG59XG5tb2R1bGUuZXhwb3J0cyA9IGNfcG9ydGFsOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==