"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),BABYLON=require("../lib/babylon"),utils=function(){function e(){_classCallCheck(this,e)}return _createClass(e,null,[{key:"defaultArgs",value:function(){var e={_name:null,_cursor:null,_hadModal:!1,_appendEL:null,_cursorVR1:null,_cursorVR2:null,_layerMask:268435455,_activeDialogLayer:268435456,_type:"FreeCamera",_position:new BABYLON.Vector3(0,0,0),_rotation:new BABYLON.Vector3(0,0,0),_diameterTop:3,_diameterBottom:3,_diameter:10,_size:10,_subdivisions:6,_tesselation:6,_thickness:3,_segements:10,_canvas:null,_material:{_texture:null,_uScale:1,_vScale:1,_backFaceCulling:!0,_vOffset:0,_uOffset:0,_hasAlpha:!1,_diffuseColor:null},_scene:{}};return e}},{key:"returnDefaultMaterial",value:function(){return{name:"default",_texture:null,_alpha:1,_uScale:1,_vScale:1,_backFaceCulling:!0,_vOffset:0,_uOffset:0,_hasAlpha:!1,_diffuseColor:null}}},{key:"loadScript",value:function(e,t){var n=document.querySelector("head"),a=document.createElement("script");a.type="text/javascript",a.src=e,a.onload=t,a.onreadystatechange=function(){"complete"==this.readyState&&t()},n.appendChild(a)}},{key:"randomArr",value:function(e){return e[Math.floor(Math.random()*e.length)]}},{key:"randomPos",value:function(e,t){return Math.random()*(t-e)+e}},{key:"guid",value:function(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}},{key:"merge_objects",value:function(e,t){var n={};for(var a in e)n[a]=e[a];for(var a in t)n[a]=t[a];return n}},{key:"degToRad",value:function(e){return e*(Math.PI/180)}},{key:"color",value:function(){var e=arguments.length<=0||void 0===arguments[0]?125:arguments[0],t=arguments.length<=1||void 0===arguments[1]?0:arguments[1],n=arguments.length<=2||void 0===arguments[2]?127:arguments[2],a=arguments.length<=3||void 0===arguments[3]?null:arguments[3];return null==a?new BABYLON.Color3(e/255,t/255,n/255):new BABYLON.Color4(e/255,t/255,n/255,a)}},{key:"getMaterials",value:function(e,t){e.push(this.returnDefaultMaterial());for(var n=0;n<e.length;n++)if(e[n].name==t)return void 0!=typeof e[n]._diffuseColor&&null!=e[n]._diffuseColor&&(e[n]._diffuseColor=this.getColor(e[n]._diffuseColor)),e[n]}},{key:"getColor",value:function(e){return e=e.split(","),4!=e.length?this.color(parseInt(e[0]),parseInt(e[1]),parseInt(e[2])):this.color(parseInt(e[0]),parseInt(e[1]),parseInt(e[2]),parseFloat(e[3]))}},{key:"getVector",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"position":arguments[1];return e=e.split(","),"position"==t?new BABYLON.Vector3(parseInt(e[0]),parseInt(e[1]),parseInt(e[2])):new BABYLON.Vector3(this.degToRad(parseInt(e[0])),this.degToRad(parseInt(e[1])),this.degToRad(parseInt(e[2])))}},{key:"assetsLoad",value:function(){var e=new BABYLON.AssetsManager(this._scenes[this._activeScene]);this.jsonAssets.forEach(function(t){function n(){var n=e.addTextureTask(t.name,t.src);n.onSuccess=function(e){this._assets[e.name]=e.texture}.bind(this),n.onError=function(e){console.log(e.name+" - failed to load")}.bind(this)}switch(t.type){case"img":n();break;case"audio":break;case"video":break;case"hdr":break;default:n.apply(this)}e.load()}.bind(this)),e.onFinish=this.assetLoadingFinished.bind(this)}}]),e}();module.exports=utils;
//# sourceMappingURL=data:application/json;base64,