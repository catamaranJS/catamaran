Object.assign||Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(r){"use strict";if(void 0===r||null===r)throw new TypeError("Cannot convert first argument to object");for(var e=Object(r),t=1;t<arguments.length;t++){var n=arguments[t];if(void 0!==n&&null!==n){n=Object(n);for(var o=Object.keys(Object(n)),a=0,i=o.length;i>a;a++){var u=o[a],c=Object.getOwnPropertyDescriptor(n,u);void 0!==c&&c.enumerable&&(e[u]=n[u])}}}return e}}),Array.from||(Array.from=function(){var r=Object.prototype.toString,e=function(e){return"function"==typeof e||"[object Function]"===r.call(e)},t=function(r){var e=Number(r);return isNaN(e)?0:0!==e&&isFinite(e)?(e>0?1:-1)*Math.floor(Math.abs(e)):e},n=Math.pow(2,53)-1,o=function(r){var e=t(r);return Math.min(Math.max(e,0),n)};return function(r){var t=this,n=Object(r);if(null==r)throw new TypeError("Array.from requires an array-like object - not null or undefined");var a,i=arguments.length>1?arguments[1]:void 0;if("undefined"!=typeof i){if(!e(i))throw new TypeError("Array.from: when provided, the second argument must be a function");arguments.length>2&&(a=arguments[2])}for(var u,c=o(n.length),f=e(t)?Object(new t(c)):new Array(c),l=0;c>l;)u=n[l],f[l]=i?"undefined"==typeof a?i(u,l):i.call(a,u,l):u,l+=1;return f.length=c,f}}()),window.symbolPolyFill=function(){void 0===Array.prototype[Symbol.iterator]&&(Array.prototype[Symbol.iterator]=function(){var r=this,e=0;return{next:function(){return{done:e>=r.length,value:r[e++]}}}})};
//# sourceMappingURL=data:application/json;base64,