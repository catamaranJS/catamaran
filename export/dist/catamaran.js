"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _classCallCheck(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,n){for(var o=0;o<n.length;o++){var t=n[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,o,t){return o&&e(n.prototype,o),t&&e(n,t),n}}(),_polyfill=require("./polyfill"),_polyfill2=_interopRequireDefault(_polyfill),_srcNode_modulesEs6SymbolImplementJs=require("../src/node_modules/es6-symbol/implement.js"),_coreEventsEvents=require("./core/events/Events"),_coreDomDOM=require("./core/dom/DOM"),_uiCarousel=require("./ui/Carousel"),_uiNav=require("./ui/Nav"),_uiPhaser=require("./ui/Phaser"),_uiAnimation=require("./ui/Animation"),_uiAniDom=require("./ui/AniDom"),_srcNode_modulesTapJsTapJs=require("../src/node_modules/tap.js/tap.js"),_coreBabyloncesIndexJs=require("./core/babylonces/index.js");"undefined"==typeof console&&(window.console={log:function(){}});var Catamaran=function(){function e(){var n=arguments.length<=0||void 0===arguments[0]?{usesPhaser:!1,components:{carousel:!1,nav:!0},vendor:{waypoints:!1,routie:!1,tap:!0}}:arguments[0];_classCallCheck(this,e),this.core={interval:{}},this.ui={two:{},components:{},Animation:{},AniDom:{}},this.vendor={},this.core.Events=_coreEventsEvents.Events,this.core.DOM=_coreDomDOM.DOM,this.core.BCES=_coreBabyloncesIndexJs.BCES,this.ui.Animation=new _uiAnimation.Animation,this.ui.AniDom=new _uiAniDom.AniDom,n.components.nav&&(this.ui.components.Nav=_Nav),n.components.carousel&&(this.ui.components.Carousel=_uiCarousel.Carousel),n.usesPhaser&&(this.ui.two.Phaser=Phaser),n.vendor.tap&&(this.vendor.tap={},this.vendor.tap=_srcNode_modulesTapJsTapJs.Tap),console.log("            `--.-+.        `--..--o.               \n           `.---+..``     `------o.               \n           `-.--+. .``.`:/.//:.--o.               \n           `----+ossoyyyyyys/.---o.               \n          ..:oyhysosssssoooooo/:-o.               \n        `.+sooossoo+oos-.:+++++oos:               \n           +ys++oo+++/++/--/ssyoohho-             \n            /yysoo+//+osys/..-/  ./sys/`          \n             -yyyo+oso/-`           ./sy+-        \n              `oyyy:`                  `/ss-      \n                :yys.                     `.      \n                 `oyy:                            \n                   -sy+`                          \n                     :so`                         \n                       -s`                        \n                                  CatamaranJS 0.01a by Brendon Smith http://bit.ly/catamaranJS")}return _createClass(e,[{key:"extend",value:function(e,n){var o=n.split(".");parent=e;var t,s;for("CATAMARAN"==o[0]&&(o=o.slice(1)),t=o.length,s=0;t>s;s++)"undefined"==typeof parent[o[s]]&&(parent[o[s]]={}),parent=parent[o[s]];return parent}},{key:"isInteger",value:function(e){return(0^e)===e}},{key:"findCenter",value:function(e){return document.querySelector(e).offsetWidth/2}},{key:"getRandomArr",value:function(e){return Math.floor(Math.random()*e.length)}},{key:"isMobile",value:function(){switch(!0){case/Android/i.test(navigator.userAgent):return this._mobileOS="android",!0;case/webOS/i.test(navigator.userAgent):return this._mobileOS="webos",!0;case/iPhone/i.test(navigator.userAgent):return this._mobileOS="iphone",!0;case/iPad/i.test(navigator.userAgent):return this._mobileOS="ipad",!0;case/iPod/i.test(navigator.userAgent):return this._mobileOS="ipod",!0;case/BlackBerry/i.test(navigator.userAgent):return this._mobileOS="blackberry",!0;case/Windows Phone/i.test(navigator.userAgent):return this._mobileOS="windows",!0;default:return!1}}},{key:"ready",value:function(e){"loading"!=document.readyState?e():document.addEventListener("DOMContentLoaded",e)}}]),e}();window.symbolPolyFill(),window.CATAMARAN=new Catamaran({usesPhaser:!0,components:{carousel:!0,nav:!0},vendor:{tap:!0}});
//# sourceMappingURL=data:application/json;base64,