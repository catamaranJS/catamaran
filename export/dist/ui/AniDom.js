"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),_get=function(t,e,i){for(var r=!0;r;){var n=t,a=e,h=i;r=!1,null===n&&(n=Function.prototype);var s=Object.getOwnPropertyDescriptor(n,a);if(void 0!==s){if("value"in s)return s.value;var o=s.get;return void 0===o?void 0:o.call(h)}var c=Object.getPrototypeOf(n);if(null===c)return void 0;t=c,e=a,i=h,r=!0,s=c=void 0}},_AnimationJs=require("./Animation.js"),AniDom=function(t){function e(){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this.frames=[],this.lastId=0,this.batch={hash:{},read:[],write:[],mode:null}}return _inherits(e,t),_createClass(e,[{key:"read",value:function(t,e){var i=this.add("read",t,e),r=i.id;this.batch.read.push(i.id);var n="reading"===this.batch.mode||this.batch.scheduled;return n?r:(this.scheduleBatch(),r)}},{key:"write",value:function(t,e){var i=this.add("write",t,e),r=this.batch.mode,n=i.id;this.batch.write.push(i.id);var a="writing"===r||"reading"===r||this.batch.scheduled;return a?n:(this.scheduleBatch(),n)}},{key:"defer",value:function(t,e,i){"function"==typeof t&&(i=e,e=t,t=1);var r=this,n=t-1;return this.schedule(n,function(){r.run({fn:e,ctx:i})})}},{key:"clear",value:function(t){if("function"==typeof t)return this.clearFrame(t);t=Number(t);var e=this.batch.hash[t];if(e){var i=this.batch[e.type],r=i.indexOf(t);delete this.batch.hash[t],~r&&i.splice(r,1)}}},{key:"clearFrame",value:function(t){var e=this.frames.indexOf(t);~e&&this.frames.splice(e,1)}},{key:"scheduleBatch",value:function(){var t=this;this.schedule(0,function(){t.batch.scheduled=!1,t.runBatch()}),this.batch.scheduled=!0}},{key:"uniqueId",value:function(){return++this.lastId}},{key:"flush",value:function(t){for(var e;e=t.shift();)this.run(this.batch.hash[e])}},{key:"runBatch",value:function(){try{this.batch.mode="reading",this.flush(this.batch.read),this.batch.mode="writing",this.flush(this.batch.write),this.batch.mode=null}catch(t){throw this.runBatch(),t}}},{key:"add",value:function(t,e,i){var r=this.uniqueId();return this.batch.hash[r]={id:r,fn:e,ctx:i,type:t}}},{key:"run",value:function(t){var e=t.ctx||this,i=t.fn;if(delete this.batch.hash[t.id],!this.onError)return i.call(e);try{i.call(e)}catch(r){this.onError(r)}}},{key:"loop",value:function(){var t=this,e=this.raf;this.looping||(e(function i(){var r=t.frames.shift();t.frames.length?e(i):t.looping=!1,r&&r()}),this.looping=!0)}},{key:"schedule",value:function(t,e){return this.frames[t]?this.schedule(t+1,e):(this.loop(),this.frames[t]=e)}}]),e}(_AnimationJs.Animation);exports.AniDom=AniDom;
//# sourceMappingURL=data:application/json;base64,