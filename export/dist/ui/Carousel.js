"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,r){for(var n=0;n<r.length;n++){var t=r[n];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(r,n,t){return n&&e(r.prototype,n),t&&e(r,t),r}}(),Carousel=function(){function e(r){var n=arguments.length<=1||void 0===arguments[1]?{speed:4,fadeIn:!0,fadeDelay:250}:arguments[1];_classCallCheck(this,e),this._settings=n,this._selectorArr=document.querySelectorAll(r),this._elmArr=new CATAMARAN.core.DOM(r),this.init()}return _createClass(e,[{key:"init",value:function(){function e(){l=f[0].scrollWidth;var e=new CATAMARAN.core.DOM(".forward"),r=new CATAMARAN.core.DOM(".backward");CATAMARAN.isMobile()?(f[0].className=f[0].className+" caroselTouch",f[0].scrollLeft=0,e.hide(),r.hide()):(f[0].setAttribute("style","overflow:visible"),f[0].scrollLeft=0,e.show(),r.show()),A._update()}for(var r=this,n=0,t=r._selectorArr.length;t>n;n++){var a,o,s,l,i,c=new CATAMARAN.core.DOM("."+r._elmArr[n].className),A=r._selectorArr[n],d='<span class="forward"></span>',u='<span class="backward"></span>',f=A.querySelectorAll(".reel"),w=A.querySelectorAll("article"),v=0;if(r._settings.fadeIn){for(var n=0,t=w.length;t>n;n++)w[n].classList.add("loading");c.onVisible(function(){var e,n=w.length-Math.ceil(window.innerWidth/s);e=window.setInterval(function(){var r=A.querySelectorAll(".loading"),t=r[0];if(r.length<=n){window.clearInterval(e);for(var a=0,o=w.length;o>a;a++)w[a].classList.remove("loading")}else"undefined"!=typeof t&&t.classList.remove("loading")},r._settings.fadeDelay)},50)}A._update=function(){v=0,o=-1*l+window.innerWidth,a=0,A._updatePos()},A._updatePos=function(){f[0].setAttribute("style","transform:translate("+v+"px, 0); -moz-transform:translate("+v+"px, 0); -webkit-transform:translate("+v+"px, 0)")},A.insertAdjacentHTML("beforeEnd",d);var M=new CATAMARAN.core.DOM(".forward");M.hide(),CATAMARAN.core.Events.on(".forward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v-=r._settings.speed,o>=v&&(window.clearInterval(CATAMARAN.core.interval),v=o),A._updatePos()},10)}),CATAMARAN.core.Events.on(".forward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),A.insertAdjacentHTML("beforeEnd",u);var h=new CATAMARAN.core.DOM(".backward");h.hide(),CATAMARAN.core.Events.on(".backward","mouseenter",function(e){CATAMARAN.core.interval=window.setInterval(function(){v+=r._settings.speed,v>=a&&(window.clearInterval(i),v=a),A._updatePos()},10)}),CATAMARAN.core.Events.on(".backward","mouseleave",function(e){window.clearInterval(CATAMARAN.core.interval)}),e(),CATAMARAN.core.Events.on("body","resize",function(r){e()})}}}]),e}();exports.Carousel=Carousel;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpL0Nhcm91c2VsLmpzIl0sIm5hbWVzIjpbIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiQ2Fyb3VzZWwiLCJzZWxlY3RvciIsInNldHRpbmdzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwic3BlZWQiLCJmYWRlSW4iLCJmYWRlRGVsYXkiLCJ0aGlzIiwiX3NldHRpbmdzIiwiX3NlbGVjdG9yQXJyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2VsbUFyciIsIkNBVEFNQVJBTiIsImNvcmUiLCJET00iLCJpbml0Iiwic2V0dXBDYXJvdXNlbCIsInJlZWxXaWR0aCIsInJlZWwiLCJzY3JvbGxXaWR0aCIsImZvcndhcmRDIiwiYmFja3dhcmRDIiwiaXNNb2JpbGUiLCJjbGFzc05hbWUiLCJzY3JvbGxMZWZ0IiwiaGlkZSIsInNldEF0dHJpYnV0ZSIsInNob3ciLCJlbG0iLCJfdXBkYXRlIiwiX2Nhcm91c2VsIiwibGVuIiwibGVmdExpbWl0IiwicmlnaHRMaW1pdCIsIml0ZW1XaWR0aCIsInRpbWVySWQiLCJzZWxmIiwiZm9yd2FyZCIsImJhY2t3YXJkIiwiaXRlbXMiLCJwb3MiLCJjbGFzc0xpc3QiLCJhZGQiLCJvblZpc2libGUiLCJsaW1pdCIsIk1hdGgiLCJjZWlsIiwid2luZG93IiwiaW5uZXJXaWR0aCIsInNldEludGVydmFsIiwieCIsInhmIiwiY2xlYXJJbnRlcnZhbCIsInJlbW92ZSIsIl91cGRhdGVQb3MiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJfZm9yd2FyZCIsIkV2ZW50cyIsIm9uIiwiZSIsImludGVydmFsIiwiX2JhY2t3YXJkIl0sIm1hcHBpbmdzIjoiQUFBQSxZQVFBLFNBQVNBLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQU5oSEMsT0FBT0MsZUFBZUMsUUFBUyxjQUMzQkMsT0FBTyxHQUdYLElBQUlDLGNBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUFFLEdBQUlFLEdBQWFILEVBQU1DLEVBQUlFLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTWIsT0FBT0MsZUFBZUssRUFBUUksRUFBV0ksSUFBS0osSUFBaUIsTUFBTyxVQUFVWixFQUFhaUIsRUFBWUMsR0FBaUosTUFBOUhELElBQVlWLEVBQWlCUCxFQUFZbUIsVUFBV0YsR0FBaUJDLEdBQWFYLEVBQWlCUCxFQUFha0IsR0FBcUJsQixNQU5waEJvQixTQUFRLFdBU1IsUUFUQUEsR0FTQ0MsR0FXTixHQVhnQkMsR0FBUUMsVUFBQVosUUFBQSxHQUFBYSxTQUFBRCxVQUFBLElBQUtFLE1BQU8sRUFBRUMsUUFBUSxFQUFNQyxVQUFXLEtBQUtKLFVBQUEsRUFhcEV6QixpQkFBZ0I4QixLQXRCWFIsR0FVQVEsS0FBS0MsVUFBWVAsRUFDakJNLEtBQUtFLGFBQWVDLFNBQVNDLGlCQUFpQlgsR0FDOUNPLEtBQUtLLFFBQVUsR0FBSUMsV0FBVUMsS0FBS0MsSUFBSWYsR0FDdENPLEtBQUtTLE9BdUlkLE1BdEhBL0IsY0E5QlNjLElBK0JMSixJQUFLLE9BQ0xYLE1BaEJGLFdBb0dNLFFBQVNpQyxLQUNMQyxFQUFZQyxFQUFLLEdBQUdDLFdBQ3BCLElBQUlDLEdBQVksR0FBSVIsV0FBVUMsS0FBS0MsSUFBSSxZQUNuQ08sRUFB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LE1BRVgxQyxVQUFVQyxLQUFLNEMsT0FBT0MsR0FBRyxZQUFhLGFBQWMsU0FBU0MsR0FDekRaLE9BQU9LLGNBQWN4QyxVQUFVQyxLQUFLK0MsWUFFeEM1QyxJQUNBSixVQUFVQyxLQUFLNEMsT0FBT0MsR0FBRyxPQUFRLFNBQVUsU0FBU0MsR0FDaEQzQyxXQTVHWGxCLElBdUpiaEIsU0FBUWdCLFNBQVdBIiwiZmlsZSI6InVpL0Nhcm91c2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIENhcm91c2Vse1xuXG4gICAgICAgLyoqXG4gICAgICAgKiBSZXByZXNlbnRzIENhdGFtYXJhbiBDb21wb25lbnQgdGhhdCBjcmVhdGVzIGEgc2ltcGxlIGNhcm9zZWwgd2luZG93LkNBVEFNQVJBTi51aS5jb21wb25lbnRzLkNhcm91c2VsICBcbiAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRoZSBzZWxlY3RvciB1c2VzIHF1ZXJ5U2VsZWN0b3JBbGwgdHJ1bnMgdGhlIG9iamVjdCBpbnRvIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRvIHVzZSB3aXRoIHdpbmRvdy5DQVRBTUFSQU4uRXh0ZW5kIG9iamVjdCBcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0IHNldHRpbmdzIGFyZSB7IHNwZWVkOiA0LGZhZGVJbjogdHJ1ZSwgZmFkZURlbGF5OiAyNTAgfS5cbiAgICAgICAqL1xuXG5cdFx0Y29uc3RydWN0b3Ioc2VsZWN0b3IsIHNldHRpbmdzID0geyBzcGVlZDogNCxmYWRlSW46IHRydWUsIGZhZGVEZWxheTogMjUwIH0pIHtcbiAgICAgICAgICAgIFx0dGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgICAgIFx0dGhpcy5fc2VsZWN0b3JBcnIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIFx0dGhpcy5fZWxtQXJyID0gbmV3IENBVEFNQVJBTi5jb3JlLkRPTShzZWxlY3Rvcik7XG4gICAgICAgICAgICBcdHRoaXMuaW5pdCgpXG5cdFx0fVxuXG5cdFx0aW5pdCgpe1xuXHRcdFx0dmFyIF9jYXJvdXNlbCA9IHRoaXM7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbGVuID0gX2Nhcm91c2VsLl9zZWxlY3RvckFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IG5ldyBDQVRBTUFSQU4uY29yZS5ET00oJy4nICsgX2Nhcm91c2VsLl9lbG1BcnJbaV0uY2xhc3NOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgZWxtID0gIF9jYXJvdXNlbC5fc2VsZWN0b3JBcnJbaV0sXG4gICAgICAgICAgICAgICAgICAgIGZvcndhcmQgPSAnPHNwYW4gY2xhc3M9XCJmb3J3YXJkXCI+PC9zcGFuPicsXG4gICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkID0gJzxzcGFuIGNsYXNzPVwiYmFja3dhcmRcIj48L3NwYW4+JyxcbiAgICAgICAgICAgICAgICAgICAgcmVlbCA9IGVsbS5xdWVyeVNlbGVjdG9yQWxsKCcucmVlbCcpLFxuICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGVsbS5xdWVyeVNlbGVjdG9yQWxsKCdhcnRpY2xlJyksXG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGxlZnRMaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRMaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICByZWVsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVySWQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoX2Nhcm91c2VsLl9zZXR0aW5ncy5mYWRlSW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1tpXS5jbGFzc0xpc3QuYWRkKCdsb2FkaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25WaXNpYmxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lcklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IGl0ZW1zLmxlbmd0aCAtIE1hdGguY2VpbCh3aW5kb3cuaW5uZXJXaWR0aCAvIGl0ZW1XaWR0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcklkID0gd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IGVsbS5xdWVyeVNlbGVjdG9yQWxsKCcubG9hZGluZycpLCB4ZiA9IHhbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHgubGVuZ3RoIDw9IGxpbWl0KSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRpbWVySWQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHhmICE9ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhmLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIF9jYXJvdXNlbC5fc2V0dGluZ3MuZmFkZURlbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxtLl91cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodExpbWl0ID0gKC0xICogcmVlbFdpZHRoKSArIHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdExpbWl0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsbS5fdXBkYXRlUG9zKCk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGVsbS5fdXBkYXRlUG9zID0gZnVuY3Rpb24oKSB7IFxuICAgICAgICAgICAgICAgIFx0cmVlbFswXS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3RyYW5zZm9ybTp0cmFuc2xhdGUoJyArIHBvcyArICdweCwgMCk7IC1tb3otdHJhbnNmb3JtOnRyYW5zbGF0ZSgnICsgcG9zICsgJ3B4LCAwKTsgLXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKCcgKyBwb3MgKyAncHgsIDApJyl9O1xuICAgICAgICAgICAgICAgICAgICBlbG0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLGZvcndhcmQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2ZvcndhcmQgPSBuZXcgQ0FUQU1BUkFOLmNvcmUuRE9NKCcuZm9yd2FyZCcpO1xuICAgICAgICAgICAgICAgICAgICBfZm9yd2FyZC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIENBVEFNQVJBTi5jb3JlLkV2ZW50cy5vbignLmZvcndhcmQnLCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQVRBTUFSQU4uY29yZS5pbnRlcnZhbCAgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyAtPSBfY2Fyb3VzZWwuX3NldHRpbmdzLnNwZWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zIDw9IHJpZ2h0TGltaXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKENBVEFNQVJBTi5jb3JlLmludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHJpZ2h0TGltaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLl91cGRhdGVQb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIENBVEFNQVJBTi5jb3JlLkV2ZW50cy5vbignLmZvcndhcmQnLCAnbW91c2VsZWF2ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKENBVEFNQVJBTi5jb3JlLmludGVydmFsKTsgICAgIFxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBlbG0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdiZWZvcmVFbmQnLGJhY2t3YXJkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9iYWNrd2FyZCA9ICBuZXcgQ0FUQU1BUkFOLmNvcmUuRE9NKCcuYmFja3dhcmQnKTtcbiAgICAgICAgICAgICAgICAgICAgX2JhY2t3YXJkLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgQ0FUQU1BUkFOLmNvcmUuRXZlbnRzLm9uKCcuYmFja3dhcmQnLCAnbW91c2VlbnRlcicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQVRBTUFSQU4uY29yZS5pbnRlcnZhbCAgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyArPSBfY2Fyb3VzZWwuX3NldHRpbmdzLnNwZWVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zID49IGxlZnRMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGltZXJJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBsZWZ0TGltaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxtLl91cGRhdGVQb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBDQVRBTUFSQU4uY29yZS5FdmVudHMub24oJy5iYWNrd2FyZCcsICdtb3VzZWxlYXZlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoQ0FUQU1BUkFOLmNvcmUuaW50ZXJ2YWwpOyAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzZXR1cENhcm91c2VsKCk7ICBcbiAgICAgICAgICAgICAgICAgICAgQ0FUQU1BUkFOLmNvcmUuRXZlbnRzLm9uKCdib2R5JywgJ3Jlc2l6ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHVwQ2Fyb3VzZWwoKTsgICBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgIFxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0dXBDYXJvdXNlbCgpe1xuICAgICAgICAgICAgICAgIHJlZWxXaWR0aCA9IHJlZWxbMF0uc2Nyb2xsV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGZvcndhcmRDID0gIG5ldyBDQVRBTUFSQU4uY29yZS5ET00oJy5mb3J3YXJkJyk7XG4gICAgICAgICAgICAgICAgdmFyIGJhY2t3YXJkQyA9ICBuZXcgQ0FUQU1BUkFOLmNvcmUuRE9NKCcuYmFja3dhcmQnKTtcbiAgICAgICAgICAgICAgICBpZiAoQ0FUQU1BUkFOLmlzTW9iaWxlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVlbFswXS5jbGFzc05hbWUgPSByZWVsWzBdLmNsYXNzTmFtZSAgKyAnIGNhcm9zZWxUb3VjaCc7XG4gICAgICAgICAgICAgICAgICAgIHJlZWxbMF0uc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvcndhcmRDLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYmFja3dhcmRDLmhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZWxbMF0uc2V0QXR0cmlidXRlKCdzdHlsZScsICdvdmVyZmxvdzp2aXNpYmxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHJlZWxbMF0uc2Nyb2xsTGVmdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3J3YXJkQy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2t3YXJkQy5zaG93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsbS5fdXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbn1cblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9