"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}var _createClass=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),_get=function(t,e,i){for(var r=!0;r;){var s=t,n=e,o=i;r=!1,null===s&&(s=Function.prototype);var a=Object.getOwnPropertyDescriptor(s,n);if(void 0!==a){if("value"in a)return a.value;var u=a.get;return void 0===u?void 0:u.call(o)}var l=Object.getPrototypeOf(s);if(null===l)return void 0;t=l,e=n,i=o,r=!0,a=l=void 0}},CES=require("CES"),BABYLON=require("../lib/babylon"),s_multiuser=function(t){function e(t){_classCallCheck(this,e),_get(Object.getPrototypeOf(e.prototype),"constructor",this).call(this),this._opts=t,this._entity=null,this._zombieModeEnabled=!1}return _inherits(e,t),_createClass(e,[{key:"update",value:function(t){var e=this.world.getEntities("multiuser");e.forEach(function(t){if(this._entity=t._components.$multiuser,this.world._multiuserInit=this._entity.sysInit,this.world._currentScene.activeCamera&&this._entity.sysInit&&this._entity.userInit){this._entity.updateUser(this.world._currentScene.activeCameras[0].position,this.world._currentScene.activeCameras[0].rotation);for(var e=0;e<this._entity.currentUsers.length;e++)this._entity.currentUsers[e].key!=this._entity.currentUserKey&&(this.spriteDoesNotExist(this._entity.currentUsers[e].key,this._entity.sprites)?(this._zombieModeEnabled=this._entity.zombieMode?!0:!1,this.updateUserSprites(this._entity.currentUsers[e])):this._entity.generateUserSprites(this._entity.currentUsers[e],e))}}.bind(this))}},{key:"spriteDoesNotExist",value:function(t,e){for(var i=!1,r=0;r<e.length;r++)if(e[r].key==t)return i=!0;return i}},{key:"updateUserSprites",value:function(t){for(var e=0;e<this._entity.sprites.length;e++)if(void 0!=this._entity.sprites[e].key&&t.key==this._entity.sprites[e].key){this._entity.zombieMode?this._entity.sprites[e].sprite.playAnimation(80,100,!0,100):this._zombieModeEnabled&&this._entity.sprites[e].sprite.playAnimation(Math.abs(20-parseInt(t.data.spriteID)),parseInt(t.data.spriteID),!0,100),this._entity.sprites[e].sprite.position=t.data.position;break}}}]),e}(CES.System);module.exports=s_multiuser;
//# sourceMappingURL=data:application/json;base64,