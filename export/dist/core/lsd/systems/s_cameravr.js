"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t["default"]=e,t}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),_get=function(e,t,r){for(var n=!0;n;){var o=e,i=t,a=r;n=!1,null===o&&(o=Function.prototype);var c=Object.getOwnPropertyDescriptor(o,i);if(void 0!==c){if("value"in c)return c.value;var l=c.get;return void 0===l?void 0:l.call(a)}var s=Object.getPrototypeOf(o);if(null===s)return void 0;e=s,t=i,r=a,n=!0,c=s=void 0}},_ces=require("ces"),CES=_interopRequireWildcard(_ces),_libBabylon=require("../lib/babylon"),BABYLON=_interopRequireWildcard(_libBabylon),s_cameravr=function(e){function t(e){_classCallCheck(this,t),_get(Object.getPrototypeOf(t.prototype),"constructor",this).call(this),this._opts=e}return _inherits(t,e),_createClass(t,[{key:"update",value:function(e){var t=this.world.getEntities("vrCamera");t.forEach(function(t){if(this.world._currentScene.activeCamera){var r=t._components.$vrCamera;e%this._opts._pickInterval<=.9&&e%this._opts._pickInterval>=.89&&r.cursorEnt.rayPick(),r.fpsUI&&r.fpsUIWindow.text(parseInt(this.world._currentScene.getEngine().fps))}}.bind(this))}}]),t}(CES.System);exports.s_cameravr=s_cameravr;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL3N5c3RlbXMvc19jYW1lcmF2ci5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZ2V0IiwiX3giLCJfeDIiLCJfeDMiLCJfYWdhaW4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInJlY2VpdmVyIiwiRnVuY3Rpb24iLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidW5kZWZpbmVkIiwiZ2V0dGVyIiwiZ2V0IiwicGFyZW50IiwiZ2V0UHJvdG90eXBlT2YiLCJfY2VzIiwicmVxdWlyZSIsIkNFUyIsIl9saWJCYWJ5bG9uIiwiQkFCWUxPTiIsInNfY2FtZXJhdnIiLCJfQ0VTJFN5c3RlbSIsIl9vcHRzIiwidGhpcyIsImR0IiwiZW50aXRpZXMiLCJ3b3JsZCIsImdldEVudGl0aWVzIiwiZm9yRWFjaCIsImVudGl0eSIsIl9jdXJyZW50U2NlbmUiLCJhY3RpdmVDYW1lcmEiLCJjYW0iLCJfY29tcG9uZW50cyIsIiR2ckNhbWVyYSIsIl9waWNrSW50ZXJ2YWwiLCJjdXJzb3JFbnQiLCJyYXlQaWNrIiwiZnBzVUkiLCJmcHNVSVdpbmRvdyIsInRleHQiLCJwYXJzZUludCIsImdldEVuZ2luZSIsImZwcyIsImJpbmQiLCJTeXN0ZW0iXSwibWFwcGluZ3MiOiJBQUFBLFlBVUEsU0FBU0EseUJBQXdCQyxHQUFPLEdBQUlBLEdBQU9BLEVBQUlDLFdBQWMsTUFBT0QsRUFBYyxJQUFJRSxLQUFhLElBQVcsTUFBUEYsRUFBZSxJQUFLLEdBQUlHLEtBQU9ILEdBQVdJLE9BQU9DLFVBQVVDLGVBQWVDLEtBQUtQLEVBQUtHLEtBQU1ELEVBQU9DLEdBQU9ILEVBQUlHLEdBQW1DLE9BQXpCRCxHQUFPLFdBQWFGLEVBQVlFLEVBRXJRLFFBQVNNLGlCQUFnQkMsRUFBVUMsR0FBZSxLQUFNRCxZQUFvQkMsSUFBZ0IsS0FBTSxJQUFJQyxXQUFVLHFDQUVoSCxRQUFTQyxXQUFVQyxFQUFVQyxHQUFjLEdBQTBCLGtCQUFmQSxJQUE0QyxPQUFmQSxFQUF1QixLQUFNLElBQUlILFdBQVUsaUVBQW9FRyxHQUFlRCxHQUFTUixVQUFZRCxPQUFPVyxPQUFPRCxHQUFjQSxFQUFXVCxXQUFhVyxhQUFlQyxNQUFPSixFQUFVSyxZQUFZLEVBQU9DLFVBQVUsRUFBTUMsY0FBYyxLQUFlTixJQUFZVixPQUFPaUIsZUFBaUJqQixPQUFPaUIsZUFBZVIsRUFBVUMsR0FBY0QsRUFBU1MsVUFBWVIsR0FaamVWLE9BQU9tQixlQUFlQyxRQUFTLGNBQzNCUCxPQUFPLEdBR1gsSUFBSVEsY0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSUMsR0FBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQUUsR0FBSUUsR0FBYUgsRUFBTUMsRUFBSUUsR0FBV2IsV0FBYWEsRUFBV2IsYUFBYyxFQUFPYSxFQUFXWCxjQUFlLEVBQVUsU0FBV1csS0FBWUEsRUFBV1osVUFBVyxHQUFNZixPQUFPbUIsZUFBZUksRUFBUUksRUFBVzVCLElBQUs0QixJQUFpQixNQUFPLFVBQVVyQixFQUFhc0IsRUFBWUMsR0FBaUosTUFBOUhELElBQVlOLEVBQWlCaEIsRUFBWUwsVUFBVzJCLEdBQWlCQyxHQUFhUCxFQUFpQmhCLEVBQWF1QixHQUFxQnZCLE1BRTdoQndCLEtBQU8sU0FBYUMsRUFBSUMsRUFBS0MsR0FBcUMsSUFBOUIsR0FBSUMsSUFBUyxFQUF3QkEsR0FBUSxDQUFFLEdBQUlDLEdBQVNKLEVBQUlLLEVBQVdKLEVBQUtLLEVBQVdKLENBQUtDLElBQVMsRUFBc0IsT0FBWEMsSUFBaUJBLEVBQVNHLFNBQVNyQyxVQUFXLElBQUlzQyxHQUFPdkMsT0FBT3dDLHlCQUF5QkwsRUFBUUMsRUFBVyxJQUFhSyxTQUFURixFQUFKLENBQTRPLEdBQUksU0FBV0EsR0FBUSxNQUFPQSxHQUFLMUIsS0FBZ0IsSUFBSTZCLEdBQVNILEVBQUtJLEdBQUssT0FBZUYsVUFBWEMsRUFBK0JELE9BQW9CQyxFQUFPdkMsS0FBS2tDLEdBQS9WLEdBQUlPLEdBQVM1QyxPQUFPNkMsZUFBZVYsRUFBUyxJQUFlLE9BQVhTLEVBQW1CLE1BQU9ILE9BQW9CVixHQUFLYSxFQUFRWixFQUFNSSxFQUFVSCxFQUFNSSxFQUFVSCxHQUFTLEVBQU1LLEVBQU9LLEVBQVNILFNBUXhjSyxLQUFPQyxRQWhCVSxPQUFUQyxJQUFHckQsd0JBQUFtRCxNQW9CWEcsWUFBY0YsUUFuQk8sa0JBQWJHLFFBQU92RCx3QkFBQXNELGFBUU5FLFdBQVUsU0FBQUMsR0FDUixRQURGRCxHQUNHRSxHQXlCUmpELGdCQUFnQmtELEtBMUJYSCxHQUVMckIsS0FBQTlCLE9BQUE2QyxlQUZLTSxFQUFVbEQsV0FBQSxjQUFBcUQsTUFBQW5ELEtBQUFtRCxNQUdmQSxLQUFLRCxNQUFRQSxFQStDakIsTUEzQkE3QyxXQXZCUzJDLEVBQVVDLEdBZ0NuQi9CLGFBaENTOEIsSUFpQ0xwRCxJQUFLLFNBQ0xjLE1BNUJFLFNBQUMwQyxHQUNELEdBQUlDLEdBQVdGLEtBQUtHLE1BQU1DLFlBQVksV0FDcENGLEdBQVNHLFFBQVEsU0FBVUMsR0FDbkIsR0FBR04sS0FBS0csTUFBTUksY0FBY0MsYUFBYSxDQUNyQyxHQUFJQyxHQUFNSCxFQUFPSSxZQUFZQyxTQUM5QlYsR0FBS0QsS0FBS0QsTUFBTWEsZUFBa0IsSUFBT1gsRUFBS0QsS0FBS0QsTUFBTWEsZUFBa0IsS0FDMUVILEVBQUlJLFVBQVVDLFVBRWZMLEVBQUlNLE9BQ0hOLEVBQUlPLFlBQVlDLEtBQUtDLFNBQVNsQixLQUFLRyxNQUFNSSxjQUFjWSxZQUFZQyxRQUc3RUMsS0FBS3JCLFdBbEJOSCxHQUFtQkgsSUFBSTRCLE9BcURwQ3hELFNBQVErQixXQUFhQSIsImZpbGUiOiJjb3JlL2xzZC9zeXN0ZW1zL3NfY2FtZXJhdnIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDRVMgZnJvbSAnY2VzJztcbmltcG9ydCAqIGFzIEJBQllMT04gZnJvbSAnLi4vbGliL2JhYnlsb24nO1xuXG4vKipcbiAqIC4uLlxuICogQGF1dGhvciBCcmVuZG9uIFNtaXRoXG4gKiBodHRwOi8vc2VhY2xvdWQ5Lm9yZ1xuICogTGlnaHRXZWlnaHQgM0QgU3lzdGVtIERlc2lnbiBlbmdpbmVcbiAqL1xuZXhwb3J0IGNsYXNzIHNfY2FtZXJhdnIgZXh0ZW5kcyBDRVMuU3lzdGVte1xuICAgIGNvbnN0cnVjdG9yKF9vcHRzKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fb3B0cyA9IF9vcHRzO1xuICAgIH1cblxuICAgIHVwZGF0ZShkdCl7XG4gICAgICAgICAgdmFyIGVudGl0aWVzID0gdGhpcy53b3JsZC5nZXRFbnRpdGllcygndnJDYW1lcmEnKTtcbiAgICAgICAgICAgIGVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBpZih0aGlzLndvcmxkLl9jdXJyZW50U2NlbmUuYWN0aXZlQ2FtZXJhKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYW0gPSBlbnRpdHkuX2NvbXBvbmVudHMuJHZyQ2FtZXJhO1xuICAgICAgICAgICAgICAgICAgICBpZihkdCAlIHRoaXMuX29wdHMuX3BpY2tJbnRlcnZhbCAgPD0gMC45ICYmIGR0ICUgdGhpcy5fb3B0cy5fcGlja0ludGVydmFsICA+PSAwLjg5KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbS5jdXJzb3JFbnQucmF5UGljaygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKGNhbS5mcHNVSSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW0uZnBzVUlXaW5kb3cudGV4dChwYXJzZUludCh0aGlzLndvcmxkLl9jdXJyZW50U2NlbmUuZ2V0RW5naW5lKCkuZnBzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9