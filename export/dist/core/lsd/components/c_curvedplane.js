"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t["default"]=e,t}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),_ces=require("ces"),CES=_interopRequireWildcard(_ces),_libBabylon=require("../lib/babylon"),BABYLON=_interopRequireWildcard(_libBabylon),_utilsUtils=require("../utils/utils"),defaults=_utilsUtils.utils.defaultArgs();defaults._name="material";var c_curvedplane=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];_classCallCheck(this,e),this.name=t._name+_utilsUtils.utils.guid(),this.obj=null,this._opts=t;for(var i=[],r=0;r<t._hSize;r++){for(var s=[],n=-2;2>=n;n++){var a=n,l=n*n/5,o=r;s.push(new BABYLON.Vector3(a,l,o))}i.push(s)}this.obj=BABYLON.Mesh.CreateRibbon(this.name,i,!1,!1,0,t._scene,!0,BABYLON.Mesh.DOUBLESIDE),this.obj.scaling.x=t._scaling[0],this.obj.scaling.y=t._scaling[1],this.obj.scaling.z=t._scaling[2],this.obj.material=mat,t._hasPicking&&this.generateHitSphere(),this.options={name:this.name,init:this.constructor,obj:this.obj},CES.Component.extend(this.options)}return _createClass(e,[{key:"generateHitSphere",value:function(){this.hitSphere=BABYLON.Mesh.CreateSphere(this.name+"hitSphere",16,.1,_opts._scene),this.hitSphere.parent=this.obj,this.hitSphere.position.z=1,this.hitSphere.position.y=1,this.hitSphere.isVisible=!1}}]),e}();exports.c_curvedplane=c_curvedplane;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL2NvbXBvbmVudHMvY19jdXJ2ZWRwbGFuZS5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jZXMiLCJyZXF1aXJlIiwiQ0VTIiwiX2xpYkJhYnlsb24iLCJCQUJZTE9OIiwiX3V0aWxzVXRpbHMiLCJkZWZhdWx0cyIsInV0aWxzIiwiZGVmYXVsdEFyZ3MiLCJfbmFtZSIsImNfY3VydmVkcGxhbmUiLCJfb3B0cyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInRoaXMiLCJuYW1lIiwiZ3VpZCIsInBhdGhzIiwidCIsIl9oU2l6ZSIsInBhdGgiLCJrIiwieCIsInkiLCJ6IiwicHVzaCIsIlZlY3RvcjMiLCJNZXNoIiwiQ3JlYXRlUmliYm9uIiwiX3NjZW5lIiwiRE9VQkxFU0lERSIsInNjYWxpbmciLCJfc2NhbGluZyIsIm1hdGVyaWFsIiwibWF0IiwiX2hhc1BpY2tpbmciLCJnZW5lcmF0ZUhpdFNwaGVyZSIsIm9wdGlvbnMiLCJpbml0IiwiY29uc3RydWN0b3IiLCJDb21wb25lbnQiLCJleHRlbmQiLCJoaXRTcGhlcmUiLCJDcmVhdGVTcGhlcmUiLCJwYXJlbnQiLCJwb3NpdGlvbiIsImlzVmlzaWJsZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFRQSxTQUFTQSx5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VUFBVUcsU0FBU3RCLEVBQUksRUFDNUJULEtBQUs0QixVQUFVSSxXQUFZLE1BM0NqQnBDLElBMEVieEIsU0FBUXdCLGNBQWdCQSIsImZpbGUiOiJjb3JlL2xzZC9jb21wb25lbnRzL2NfY3VydmVkcGxhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDRVMgZnJvbSAnY2VzJztcbmltcG9ydCAqIGFzIEJBQllMT04gZnJvbSAnLi4vbGliL2JhYnlsb24nO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG52YXIgZGVmYXVsdHMgPSB1dGlscy5kZWZhdWx0QXJncygpO1xuZGVmYXVsdHMuX25hbWUgPSAnbWF0ZXJpYWwnO1xuLyoqXG4gKiAuLi5cbiAqIEBhdXRob3IgQnJlbmRvbiBTbWl0aFxuICogaHR0cDovL3NlYWNsb3VkOS5vcmdcbiAqIExpZ2h0V2VpZ2h0IDNEIFN5c3RlbSBEZXNpZ24gZW5naW5lXG4gKi9cbmV4cG9ydCBjbGFzcyBjX2N1cnZlZHBsYW5lIHtcblx0Y29uc3RydWN0b3IoX29wdHMgPSBkZWZhdWx0cyl7XG5cdFx0dGhpcy5uYW1lID0gX29wdHMuX25hbWUgKyB1dGlscy5ndWlkKCk7XG5cdFx0dGhpcy5vYmogPSBudWxsO1xuXHRcdHRoaXMuX29wdHMgPSBfb3B0cztcblx0XHRcblx0XHR2YXIgcGF0aHMgPSBbXTtcblx0XHRmb3IgKHZhciB0ID0gMDsgdCA8IF9vcHRzLl9oU2l6ZTsgdCsrKSB7XG5cdFx0XHR2YXIgcGF0aCA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgayA9IC0yOyBrIDw9IDI7IGsrKykge1xuXHRcdFx0ICB2YXIgeCA9IGs7XG5cdFx0XHQgIHZhciB5ID0gKGsgKiBrKSAvIDU7XG5cdFx0XHQgIHZhciB6ID0gdDtcblx0XHRcdCAgcGF0aC5wdXNoKG5ldyBCQUJZTE9OLlZlY3RvcjMoeCwgeSwgeikpO1xuXHRcdFx0fVxuXHRcdFx0cGF0aHMucHVzaChwYXRoKTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5vYmogPSBCQUJZTE9OLk1lc2guQ3JlYXRlUmliYm9uKHRoaXMubmFtZSwgcGF0aHMsIGZhbHNlLCBmYWxzZSwgMCwgX29wdHMuX3NjZW5lLCB0cnVlLCBCQUJZTE9OLk1lc2guRE9VQkxFU0lERSk7XG5cdFx0dGhpcy5vYmouc2NhbGluZy54ID0gIF9vcHRzLl9zY2FsaW5nWzBdO1xuXHRcdHRoaXMub2JqLnNjYWxpbmcueSA9ICBfb3B0cy5fc2NhbGluZ1sxXTtcblx0XHR0aGlzLm9iai5zY2FsaW5nLnogPSAgX29wdHMuX3NjYWxpbmdbMl07XG5cdFx0dGhpcy5vYmoubWF0ZXJpYWwgPSBtYXQ7XG5cblxuXHRcdGlmKF9vcHRzLl9oYXNQaWNraW5nKXtcblx0XHRcdHRoaXMuZ2VuZXJhdGVIaXRTcGhlcmUoKTtcblx0XHR9IFxuXHRcdFxuXG5cdFx0dGhpcy5vcHRpb25zID0ge1xuXHRcdFx0bmFtZTp0aGlzLm5hbWUgLFxuXHRcdFx0aW5pdDogdGhpcy5jb25zdHJ1Y3Rvcixcblx0XHRcdG9iajp0aGlzLm9ialxuXHRcdH1cblx0XHRDRVMuQ29tcG9uZW50LmV4dGVuZCh0aGlzLm9wdGlvbnMpO1xuXHR9XG5cblx0Z2VuZXJhdGVIaXRTcGhlcmUoKXtcblx0XHR0aGlzLmhpdFNwaGVyZSA9IEJBQllMT04uTWVzaC5DcmVhdGVTcGhlcmUodGhpcy5uYW1lK1wiaGl0U3BoZXJlXCIsIDE2LCAwLjEsIF9vcHRzLl9zY2VuZSk7XG5cdCBcdHRoaXMuaGl0U3BoZXJlLnBhcmVudCA9IHRoaXMub2JqO1xuXHQgXHR0aGlzLmhpdFNwaGVyZS5wb3NpdGlvbi56ID0gMS4wO1xuXHQgXHR0aGlzLmhpdFNwaGVyZS5wb3NpdGlvbi55ID0gMTtcblx0IFx0dGhpcy5oaXRTcGhlcmUuaXNWaXNpYmxlID0gZmFsc2U7XG5cdH1cblxuXHRcblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==