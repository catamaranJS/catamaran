"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t["default"]=e,t}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var r=t[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),t}}(),_ces=require("ces"),CES=_interopRequireWildcard(_ces),_utilsUtils=require("../utils/utils"),_libBabylon=require("../lib/babylon");Object.defineProperty(exports,"BABYLON",{enumerable:!0,get:function(){return _libBabylon.BABYLON}});var defaults=_utilsUtils.utils.defaultArgs();defaults._name="material";var c_curvedplane=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];_classCallCheck(this,e),this.name=t._name+_utilsUtils.utils.guid(),this.obj=null,this._opts=t;for(var i=[],r=0;r<t._hSize;r++){for(var n=[],s=-2;2>=s;s++){var a=s,l=s*s/5,o=r;n.push(new BABYLON.Vector3(a,l,o))}i.push(n)}this.obj=BABYLON.Mesh.CreateRibbon(this.name,i,!1,!1,0,t._scene,!0,BABYLON.Mesh.DOUBLESIDE),this.obj.scaling.x=t._scaling[0],this.obj.scaling.y=t._scaling[1],this.obj.scaling.z=t._scaling[2],this.obj.material=mat,t._hasPicking&&this.generateHitSphere(),this.options={name:this.name,init:this.constructor,obj:this.obj},CES.Component.extend(this.options)}return _createClass(e,[{key:"generateHitSphere",value:function(){this.hitSphere=BABYLON.Mesh.CreateSphere(this.name+"hitSphere",16,.1,_opts._scene),this.hitSphere.parent=this.obj,this.hitSphere.position.z=1,this.hitSphere.position.y=1,this.hitSphere.isVisible=!1}}]),e}();exports.c_curvedplane=c_curvedplane;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL2NvbXBvbmVudHMvY19jdXJ2ZWRwbGFuZS5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJfY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jZXMiLCJyZXF1aXJlIiwiQ0VTIiwiX3V0aWxzVXRpbHMiLCJfbGliQmFieWxvbiIsImdldCIsIkJBQllMT04iLCJkZWZhdWx0cyIsInV0aWxzIiwiZGVmYXVsdEFyZ3MiLCJfbmFtZSIsImNfY3VydmVkcGxhbmUiLCJfb3B0cyIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInRoaXMiLCJuYW1lIiwiZ3VpZCIsInBhdGhzIiwidCIsIl9oU2l6ZSIsInBhdGgiLCJrIiwieCIsInkiLCJ6IiwicHVzaCIsIlZlY3RvcjMiLCJNZXNoIiwiQ3JlYXRlUmliYm9uIiwiX3NjZW5lIiwiRE9VQkxFU0lERSIsInNjYWxpbmciLCJfc2NhbGluZyIsIm1hdGVyaWFsIiwibWF0IiwiX2hhc1BpY2tpbmciLCJnZW5lcmF0ZUhpdFNwaGVyZSIsIm9wdGlvbnMiLCJpbml0IiwiY29uc3RydWN0b3IiLCJDb21wb25lbnQiLCJleHRlbmQiLCJoaXRTcGhlcmUiLCJDcmVhdGVTcGhlcmUiLCJwYXJlbnQiLCJwb3NpdGlvbiIsImlzVmlzaWJsZSJdLCJtYXBwaW5ncyI6IkFBQUEsWUFRQSxT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OUIsS0FBSzFDLElBQzdCMEMsS0FBSzRCLFVBQVVHLFNBQVNyQixFQUFJLEVBQzVCVixLQUFLNEIsVUFBVUcsU0FBU3RCLEVBQUksRUFDNUJULEtBQUs0QixVQUFVSSxXQUFZLE1BM0NqQnBDLElBK0ViekIsU0FBUXlCLGNBQWdCQSIsImZpbGUiOiJjb3JlL2xzZC9jb21wb25lbnRzL2NfY3VydmVkcGxhbmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBDRVMgZnJvbSAnY2VzJztcbmV4cG9ydCB7IEJBQllMT04gfSBmcm9tICcuLi9saWIvYmFieWxvbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbnZhciBkZWZhdWx0cyA9IHV0aWxzLmRlZmF1bHRBcmdzKCk7XG5kZWZhdWx0cy5fbmFtZSA9ICdtYXRlcmlhbCc7XG4vKipcbiAqIC4uLlxuICogQGF1dGhvciBCcmVuZG9uIFNtaXRoXG4gKiBodHRwOi8vc2VhY2xvdWQ5Lm9yZ1xuICogTGlnaHRXZWlnaHQgM0QgU3lzdGVtIERlc2lnbiBlbmdpbmVcbiAqL1xuZXhwb3J0IGNsYXNzIGNfY3VydmVkcGxhbmUge1xuXHRjb25zdHJ1Y3Rvcihfb3B0cyA9IGRlZmF1bHRzKXtcblx0XHR0aGlzLm5hbWUgPSBfb3B0cy5fbmFtZSArIHV0aWxzLmd1aWQoKTtcblx0XHR0aGlzLm9iaiA9IG51bGw7XG5cdFx0dGhpcy5fb3B0cyA9IF9vcHRzO1xuXHRcdFxuXHRcdHZhciBwYXRocyA9IFtdO1xuXHRcdGZvciAodmFyIHQgPSAwOyB0IDwgX29wdHMuX2hTaXplOyB0KyspIHtcblx0XHRcdHZhciBwYXRoID0gW107XG5cdFx0XHRmb3IgKHZhciBrID0gLTI7IGsgPD0gMjsgaysrKSB7XG5cdFx0XHQgIHZhciB4ID0gaztcblx0XHRcdCAgdmFyIHkgPSAoayAqIGspIC8gNTtcblx0XHRcdCAgdmFyIHogPSB0O1xuXHRcdFx0ICBwYXRoLnB1c2gobmV3IEJBQllMT04uVmVjdG9yMyh4LCB5LCB6KSk7XG5cdFx0XHR9XG5cdFx0XHRwYXRocy5wdXNoKHBhdGgpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLm9iaiA9IEJBQllMT04uTWVzaC5DcmVhdGVSaWJib24odGhpcy5uYW1lLCBwYXRocywgZmFsc2UsIGZhbHNlLCAwLCBfb3B0cy5fc2NlbmUsIHRydWUsIEJBQllMT04uTWVzaC5ET1VCTEVTSURFKTtcblx0XHR0aGlzLm9iai5zY2FsaW5nLnggPSAgX29wdHMuX3NjYWxpbmdbMF07XG5cdFx0dGhpcy5vYmouc2NhbGluZy55ID0gIF9vcHRzLl9zY2FsaW5nWzFdO1xuXHRcdHRoaXMub2JqLnNjYWxpbmcueiA9ICBfb3B0cy5fc2NhbGluZ1syXTtcblx0XHR0aGlzLm9iai5tYXRlcmlhbCA9IG1hdDtcblxuXG5cdFx0aWYoX29wdHMuX2hhc1BpY2tpbmcpe1xuXHRcdFx0dGhpcy5nZW5lcmF0ZUhpdFNwaGVyZSgpO1xuXHRcdH0gXG5cdFx0XG5cblx0XHR0aGlzLm9wdGlvbnMgPSB7XG5cdFx0XHRuYW1lOnRoaXMubmFtZSAsXG5cdFx0XHRpbml0OiB0aGlzLmNvbnN0cnVjdG9yLFxuXHRcdFx0b2JqOnRoaXMub2JqXG5cdFx0fVxuXHRcdENFUy5Db21wb25lbnQuZXh0ZW5kKHRoaXMub3B0aW9ucyk7XG5cdH1cblxuXHRnZW5lcmF0ZUhpdFNwaGVyZSgpe1xuXHRcdHRoaXMuaGl0U3BoZXJlID0gQkFCWUxPTi5NZXNoLkNyZWF0ZVNwaGVyZSh0aGlzLm5hbWUrXCJoaXRTcGhlcmVcIiwgMTYsIDAuMSwgX29wdHMuX3NjZW5lKTtcblx0IFx0dGhpcy5oaXRTcGhlcmUucGFyZW50ID0gdGhpcy5vYmo7XG5cdCBcdHRoaXMuaGl0U3BoZXJlLnBvc2l0aW9uLnogPSAxLjA7XG5cdCBcdHRoaXMuaGl0U3BoZXJlLnBvc2l0aW9uLnkgPSAxO1xuXHQgXHR0aGlzLmhpdFNwaGVyZS5pc1Zpc2libGUgPSBmYWxzZTtcblx0fVxuXG5cdFxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9