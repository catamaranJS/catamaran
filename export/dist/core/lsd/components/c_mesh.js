"use strict";function _interopRequireWildcard(e){if(e&&e.__esModule)return e;var s={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(s[t]=e[t]);return s["default"]=e,s}function _classCallCheck(e,s){if(!(e instanceof s))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _ces=require("ces"),CES=_interopRequireWildcard(_ces),_libBabylon=require("../lib/babylon"),BABYLON=_interopRequireWildcard(_libBabylon),_utilsUtils=require("../utils/utils"),defaults=_utilsUtils.utils.defaultArgs();defaults._name="mesh";var c_mesh=function e(){var s=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];switch(_classCallCheck(this,e),this.name=s._name+_utilsUtils.utils.guid(),this.obj=null,s._type){case"Box":this.obj=BABYLON.Mesh.CreateBox(this.name,s._size,s._scene);break;case"Sphere":this.obj=BABYLON.Mesh.CreateSphere(this.name,s._segments,s._diameter,s._scene);break;case"Plane":this.obj=BABYLON.Mesh.CreatePlane(this.name,s._size,s._scene);break;case"Cylinder":this.obj=BABYLON.Mesh.CreateCylinder(this.name,s._height,s._diameterTop,s._diameterBottom,s._tesselation,s._subdivisions,s._scene,!1);break;case"Torus":this.obj=BABYLON.Mesh.CreateTorus(this.name,s._diameter,s._thickness,s._tesselation,s._scene,!1);break;case"Ribbon":this.obj=BABYLON.Mesh.CreateRibbon(this.name,s._path,s._closeArray=!1,s._closePath=!1,s._offset=0,s._scene,s._updateable=!0,s._sideOreientation=BABYLON.Mesh.DOUBLESIDE,s._instance=void 0);break;default:this.obj=BABYLON.Mesh.CreateBox(this.name,s._size,s._scene)}this.obj.layerMask=parseInt(s._layerMask),this.obj.isPickable=s._isPickable,this.obj.position=s._position,this.obj.rotation=s._rotation,this.options={name:this.name,init:this.constructor,obj:this.obj},CES.Component.extend(this.options)};exports.c_mesh=c_mesh;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvbHNkL2NvbXBvbmVudHMvY19tZXNoLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9jZXMiLCJyZXF1aXJlIiwiQ0VTIiwiX2xpYkJhYnlsb24iLCJCQUJZTE9OIiwiX3V0aWxzVXRpbHMiLCJkZWZhdWx0cyIsInV0aWxzIiwiZGVmYXVsdEFyZ3MiLCJfbmFtZSIsImNfbWVzaCIsIl9vcHRzIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwidGhpcyIsIm5hbWUiLCJndWlkIiwiX3R5cGUiLCJNZXNoIiwiQ3JlYXRlQm94IiwiX3NpemUiLCJfc2NlbmUiLCJDcmVhdGVTcGhlcmUiLCJfc2VnbWVudHMiLCJfZGlhbWV0ZXIiLCJDcmVhdGVQbGFuZSIsIkNyZWF0ZUN5bGluZGVyIiwiX2hlaWdodCIsIl9kaWFtZXRlclRvcCIsIl9kaWFtZXRlckJvdHRvbSIsIl90ZXNzZWxhdGlvbiIsIl9zdWJkaXZpc2lvbnMiLCJDcmVhdGVUb3J1cyIsIl90aGlja25lc3MiLCJDcmVhdGVSaWJib24iLCJfcGF0aCIsIl9jbG9zZUFycmF5IiwiX2Nsb3NlUGF0aCIsIl9vZmZzZXQiLCJfdXBkYXRlYWJsZSIsIl9zaWRlT3JlaWVudGF0aW9uIiwiRE9VQkxFU0lERSIsIl9pbnN0YW5jZSIsImxheWVyTWFzayIsInBhcnNlSW50IiwiX2xheWVyTWFzayIsImlzUGlja2FibGUiLCJfaXNQaWNrYWJsZSIsInBvc2l0aW9uIiwiX3Bvc2l0aW9uIiwicm90YXRpb24iLCJfcm90YXRpb24iLCJvcHRpb25zIiwiaW5pdCIsImNvbnN0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ZC9jb21wb25lbnRzL2NfbWVzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENFUyBmcm9tICdjZXMnO1xuaW1wb3J0ICogYXMgQkFCWUxPTiBmcm9tICcuLi9saWIvYmFieWxvbic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbnZhciBkZWZhdWx0cyA9IHV0aWxzLmRlZmF1bHRBcmdzKCk7XG5kZWZhdWx0cy5fbmFtZSA9ICdtZXNoJztcbi8qKlxuICogLi4uXG4gKiBAYXV0aG9yIEJyZW5kb24gU21pdGhcbiAqIGh0dHA6Ly9zZWFjbG91ZDkub3JnXG4gKiBMaWdodFdlaWdodCAzRCBTeXN0ZW0gRGVzaWduIGVuZ2luZVxuICovXG5leHBvcnQgY2xhc3MgY19tZXNoIHtcblx0Y29uc3RydWN0b3IoX29wdHMgPSBkZWZhdWx0cyl7XG5cdFx0dGhpcy5uYW1lID0gX29wdHMuX25hbWUgKyB1dGlscy5ndWlkKCk7XG5cdFx0dGhpcy5vYmogPSBudWxsO1xuXHRcdHN3aXRjaChfb3B0cy5fdHlwZSkge1xuXHRcdCAgICBjYXNlICdCb3gnOlxuXHRcdCAgICAgICAgdGhpcy5vYmo9IEJBQllMT04uTWVzaC5DcmVhdGVCb3godGhpcy5uYW1lICwgX29wdHMuX3NpemUsIF9vcHRzLl9zY2VuZSk7XG5cdFx0ICAgICAgICBicmVhaztcblx0XHQgICAgY2FzZSAnU3BoZXJlJzpcblx0XHQgICAgICAgIC8vKG5hbWUgb2YgdGhlIHNwaGVyZSwgc2VnbWVudHMsIGRpYW1ldGVyLCBzY2VuZSkgXG5cdFx0XHRcdHRoaXMub2JqID0gQkFCWUxPTi5NZXNoLkNyZWF0ZVNwaGVyZSh0aGlzLm5hbWUgLCBfb3B0cy5fc2VnbWVudHMsIF9vcHRzLl9kaWFtZXRlciwgX29wdHMuX3NjZW5lKTtcblx0XHQgICAgICAgIGJyZWFrO1xuXHRcdCAgICBjYXNlICdQbGFuZSc6XG5cdFx0ICAgICAgICAgdGhpcy5vYmogPSBCQUJZTE9OLk1lc2guQ3JlYXRlUGxhbmUodGhpcy5uYW1lICwgX29wdHMuX3NpemUsIF9vcHRzLl9zY2VuZSk7XG5cdFx0ICAgICAgICBicmVhaztcdFx0ICAgICAgICBcblx0XHQgICAgY2FzZSAnQ3lsaW5kZXInOlxuXHRcdCAgICAgICBcdC8vKG5hbWUsIGhlaWdodCwgZGlhbWV0ZXIsIHRlc3NlbGxhdGlvbiwgc2NlbmUsIHVwZGF0YWJsZSlcblx0XHRcdFx0dGhpcy5vYmogPSBCQUJZTE9OLk1lc2guQ3JlYXRlQ3lsaW5kZXIodGhpcy5uYW1lICwgX29wdHMuX2hlaWdodCwgX29wdHMuX2RpYW1ldGVyVG9wLCAgX29wdHMuX2RpYW1ldGVyQm90dG9tLCBfb3B0cy5fdGVzc2VsYXRpb24sIF9vcHRzLl9zdWJkaXZpc2lvbnMsIF9vcHRzLl9zY2VuZSwgZmFsc2UpO1xuXHRcdCAgICAgICAgYnJlYWs7XG5cdFx0ICAgIGNhc2UgJ1RvcnVzJzpcblx0XHQgICAgICAgIC8vIChuYW1lLCBkaWFtZXRlciwgdGhpY2tuZXNzLCB0ZXNzZWxsYXRpb24sIHNjZW5lLCB1cGRhdGFibGUpXG5cdFx0XHRcdHRoaXMub2JqID0gQkFCWUxPTi5NZXNoLkNyZWF0ZVRvcnVzKHRoaXMubmFtZSAsIF9vcHRzLl9kaWFtZXRlciwgX29wdHMuX3RoaWNrbmVzcywgX29wdHMuX3Rlc3NlbGF0aW9uLCBfb3B0cy5fc2NlbmUsIGZhbHNlKTtcblx0XHQgICAgICAgIGJyZWFrO1x0XG5cdFx0ICAgICBjYXNlICdSaWJib24nOlxuXHRcdCAgICAgICAgLy8gKG5hbWU6IHN0cmluZywgcGF0aEFycmF5OiBWZWN0b3IzW11bXSwgY2xvc2VBcnJheTogYm9vbGVhbiwgY2xvc2VQYXRoOiBib29sZWFuLCBvZmZzZXQ6IG51bWJlciwgc2NlbmU6IFNjZW5lLCB1cGRhdGFibGU/OiBib29sZWFuLCBzaWRlT3JpZW50YXRpb24/OiBudW1iZXIsIGluc3RhbmNlPzogTWVzaClcblx0XHRcdFx0dGhpcy5vYmogPSBCQUJZTE9OLk1lc2guQ3JlYXRlUmliYm9uKHRoaXMubmFtZSwgX29wdHMuX3BhdGgsIF9vcHRzLl9jbG9zZUFycmF5ID0gZmFsc2UsIF9vcHRzLl9jbG9zZVBhdGggPSBmYWxzZSwgIF9vcHRzLl9vZmZzZXQgPSAwLCBfb3B0cy5fc2NlbmUsICBfb3B0cy5fdXBkYXRlYWJsZSA9IHRydWUsIF9vcHRzLl9zaWRlT3JlaWVudGF0aW9uID0gQkFCWUxPTi5NZXNoLkRPVUJMRVNJREUsIF9vcHRzLl9pbnN0YW5jZSA9IHVuZGVmaW5lZCk7XG5cdFx0ICAgICAgICBicmVhaztcdCAgICAgICAgICAgIFx0XHQgICAgICAgIFxuXHRcdCAgICBkZWZhdWx0OlxuXHRcdCAgICAgICAgdGhpcy5vYmo9IEJBQllMT04uTWVzaC5DcmVhdGVCb3godGhpcy5uYW1lLCBfb3B0cy5fc2l6ZSwgX29wdHMuX3NjZW5lKTtcblx0XHQgfVxuXHRcdHRoaXMub2JqLmxheWVyTWFzayA9IHBhcnNlSW50KF9vcHRzLl9sYXllck1hc2spO1xuXHRcdHRoaXMub2JqLmlzUGlja2FibGUgPSBfb3B0cy5faXNQaWNrYWJsZTtcblx0XHR0aGlzLm9iai5wb3NpdGlvbiA9IF9vcHRzLl9wb3NpdGlvbjtcblx0XHR0aGlzLm9iai5yb3RhdGlvbiA9IF9vcHRzLl9yb3RhdGlvbjtcblx0XHR0aGlzLm9wdGlvbnMgPSB7XG5cdFx0XHRuYW1lOnRoaXMubmFtZSAsXG5cdFx0XHRpbml0OiB0aGlzLmNvbnN0cnVjdG9yLFxuXHRcdFx0b2JqOnRoaXMub2JqXG5cdFx0fVxuXHRcdENFUy5Db21wb25lbnQuZXh0ZW5kKHRoaXMub3B0aW9ucyk7XG5cdH1cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==