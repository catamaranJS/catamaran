"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var a=t[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,s,a){return s&&e(t.prototype,s),a&&e(t,a),t}}(),CES=require("ces"),BABYLON=require("../lib/babylon"),utils=require("../utils/utils"),defaults=utils.defaultArgs();defaults._name="material";var c_material=function(){function e(){var t=arguments.length<=0||void 0===arguments[0]?defaults:arguments[0];switch(_classCallCheck(this,e),this.name=t._name+utils.guid(),this.obj=null,this._opts=t,t._type){case"Standard":this.StandardMaterial();break;case"Shader":break;case"Dynamic":break;case"Fresenel":break;case"PBR":break;default:this.StandardMaterial()}this.options={name:this.name,init:this.constructor,obj:this.obj},CES.Component.extend(this.options)}return _createClass(e,[{key:"StandardMaterial",value:function(){this.obj=new BABYLON.StandardMaterial("texturePlane",this._opts._scene),null!=this._opts._texture&&(this.obj.diffuseTexture=this._opts._texture,this.obj.diffuseTexture.uScale=this._opts._uScale,this.obj.diffuseTexture.vScale=this._opts._vScale,this.obj.backFaceCulling=this._opts._backFaceCulling,this.obj.diffuseTexture.vOffset=this._opts._vOffset,this.obj.diffuseTexture.uOffset=this._opts._uOffset,this.obj.diffuseTexture.hasAlpha=this._opts._hasAlpha),null!=this._opts._diffuseColor&&(this.obj.diffuseColor=this._opts._diffuseColor)}}]),e}();module.exports=c_material;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvYmFieWxvbmNlcy9jb21wb25lbnRzL2NfbWF0ZXJpYWwuanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJDRVMiLCJyZXF1aXJlIiwiQkFCWUxPTiIsInV0aWxzIiwiZGVmYXVsdHMiLCJkZWZhdWx0QXJncyIsIl9uYW1lIiwiY19tYXRlcmlhbCIsIl9vcHRzIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwidGhpcyIsIm5hbWUiLCJndWlkIiwib2JqIiwiX3R5cGUiLCJTdGFuZGFyZE1hdGVyaWFsIiwib3B0aW9ucyIsImluaXQiLCJjb25zdHJ1Y3RvciIsIkNvbXBvbmVudCIsImV4dGVuZCIsInZhbHVlIiwiX3NjZW5lIiwiX3RleHR1cmUiLCJkaWZmdXNlVGV4dHVyZSIsInVTY2FsZSIsIl91U2NhbGUiLCJ2U2NhbGUiLCJfdlNjYWxlIiwiYmFja0ZhY2VDdWxsaW5nIiwiX2JhY2tGYWNlQ3VsbGluZyIsInZPZmZzZXQiLCJfdk9mZnNldCIsInVPZmZzZXQiLCJfdU9mZnNldCIsImhhc0FscGhhIiwiX2hhc0FscGhhIiwiX2RpZmZ1c2VDb2xvciIsImRpZmZ1c2VDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFlBSUEsU0FBU0EsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRmhILEdBQUlDLGNBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUFFLEdBQUlFLEdBQWFILEVBQU1DLEVBQUlFLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTUMsT0FBT0MsZUFBZVQsRUFBUUksRUFBV00sSUFBS04sSUFBaUIsTUFBTyxVQUFVUixFQUFhZSxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWVosRUFBaUJILEVBQVlpQixVQUFXRixHQUFpQkMsR0FBYWIsRUFBaUJILEVBQWFnQixHQUFxQmhCLE1BRjdoQmtCLElBQU1DLFFBQVEsT0FDZEMsUUFBVUQsUUFBUSxrQkFDbEJFLE1BQVFGLFFBQVEsa0JBRWhCRyxTQUFXRCxNQUFNRSxhQUNyQkQsVUFBU0UsTUFBUSxVQVFqQixJQU5NQyxZQUFVLFdBQ0osUUFETkEsS0FRSixHQVBXQyxHQUFLQyxVQUFBcEIsUUFBQSxHQUFBcUIsU0FBQUQsVUFBQSxHQUFHTCxTQUFRSyxVQUFBLEVBSTNCLFFBS0E3QixnQkFBZ0IrQixLQVZaSixHQUVKSSxLQUFLQyxLQUFPSixFQUFNRixNQUFRSCxNQUFNVSxPQUNoQ0YsS0FBS0csSUFBTSxLQUNYSCxLQUFLSCxNQUFRQSxFQUNOQSxFQUFNTyxPQUNULElBQUssV0FDSkosS0FBS0ssa0JBQ0YsTUFDSixLQUFLLFNBR0QsS0FDSixLQUFLLFVBRUQsS0FDSixLQUFLLFdBRUQsS0FDSixLQUFLLE1BRUQsS0FDSixTQUNJTCxLQUFLSyxtQkFFYkwsS0FBS00sU0FDSkwsS0FBS0QsS0FBS0MsS0FDVk0sS0FBTVAsS0FBS1EsWUFDWEwsSUFBSUgsS0FBS0csS0FFVmQsSUFBSW9CLFVBQVVDLE9BQU9WLEtBQUtNLFNBaUMzQixNQXBCQWpDLGNBM0NLdUIsSUE0Q0pYLElBQUssbUJBQ0wwQixNQVplLFdBQ2ZYLEtBQUtHLElBQU0sR0FBSVosU0FBUWMsaUJBQWlCLGVBQWdCTCxLQUFLSCxNQUFNZSxRQUN6QyxNQUF2QlosS0FBS0gsTUFBTWdCLFdBQ2JiLEtBQUtHLElBQUlXLGVBQWlCZCxLQUFLSCxNQUFNZ0IsU0FDckNiLEtBQUtHLElBQUlXLGVBQWVDLE9BQVNmLEtBQUtILE1BQU1tQixRQUM1Q2hCLEtBQUtHLElBQUlXLGVBQWVHLE9BQVNqQixLQUFLSCxNQUFNcUIsUUFDNUNsQixLQUFLRyxJQUFJZ0IsZ0JBQWtCbkIsS0FBS0gsTUFBTXVCLGlCQUN0Q3BCLEtBQUtHLElBQUlXLGVBQWVPLFFBQVVyQixLQUFLSCxNQUFNeUIsU0FDMUN0QixLQUFLRyxJQUFJVyxlQUFlUyxRQUFVdkIsS0FBS0gsTUFBTTJCLFNBQzdDeEIsS0FBS0csSUFBSVcsZUFBZVcsU0FBV3pCLEtBQUtILE1BQU02QixXQUloQixNQUE1QjFCLEtBQUtILE1BQU04QixnQkFDYjNCLEtBQUtHLElBQUl5QixhQUFjNUIsS0FBS0gsTUFBTThCLG1CQS9DbEMvQixJQW9ETmlDLFFBQU9DLFFBQVVsQyIsImZpbGUiOiJjb3JlL2JhYnlsb25jZXMvY29tcG9uZW50cy9jX21hdGVyaWFsLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIENFUyA9IHJlcXVpcmUoJ2NlcycpO1xudmFyIEJBQllMT04gPSByZXF1aXJlKCcuLi9saWIvYmFieWxvbicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTtcblxudmFyIGRlZmF1bHRzID0gdXRpbHMuZGVmYXVsdEFyZ3MoKTtcbmRlZmF1bHRzLl9uYW1lID0gJ21hdGVyaWFsJztcblxuY2xhc3MgY19tYXRlcmlhbCB7XG5cdGNvbnN0cnVjdG9yKF9vcHRzID0gZGVmYXVsdHMpe1xuXHRcdHRoaXMubmFtZSA9IF9vcHRzLl9uYW1lICsgdXRpbHMuZ3VpZCgpO1xuXHRcdHRoaXMub2JqID0gbnVsbDtcblx0XHR0aGlzLl9vcHRzID0gX29wdHM7XG5cdFx0c3dpdGNoKF9vcHRzLl90eXBlKSB7XG5cdFx0ICAgIGNhc2UgJ1N0YW5kYXJkJzpcblx0XHQgICAgXHR0aGlzLlN0YW5kYXJkTWF0ZXJpYWwoKTtcblx0XHQgICAgICAgIGJyZWFrO1xuXHRcdCAgICBjYXNlICdTaGFkZXInOlxuXHRcdCAgICAgICAgLy90b2RvXG5cdFx0XHRcdFxuXHRcdCAgICAgICAgYnJlYWs7XG5cdFx0ICAgIGNhc2UgJ0R5bmFtaWMnOlxuXHRcdCAgICAgICAgLy90b2RvXG5cdFx0ICAgICAgICBicmVhaztcdFxuXHRcdCAgICBjYXNlICdGcmVzZW5lbCc6XG5cdFx0ICAgICAgICAvL3RvZG9cblx0XHQgICAgICAgIGJyZWFrO1xuXHRcdCAgICBjYXNlICdQQlInOlxuXHRcdCAgICAgICAgLy90b2RvXG5cdFx0ICAgICAgICBicmVhazsgICAgXHQgICAgXHQgICAgICAgICAgICAgICAgXG5cdFx0ICAgIGRlZmF1bHQ6XG5cdFx0ICAgICAgICB0aGlzLlN0YW5kYXJkTWF0ZXJpYWwoKTtcblx0XHQgfVxuXHRcdHRoaXMub3B0aW9ucyA9IHtcblx0XHRcdG5hbWU6dGhpcy5uYW1lICxcblx0XHRcdGluaXQ6IHRoaXMuY29uc3RydWN0b3IsXG5cdFx0XHRvYmo6dGhpcy5vYmpcblx0XHR9XG5cdFx0Q0VTLkNvbXBvbmVudC5leHRlbmQodGhpcy5vcHRpb25zKTtcblx0fVxuXG5cdFN0YW5kYXJkTWF0ZXJpYWwoKXtcblx0XHR0aGlzLm9iaiA9IG5ldyBCQUJZTE9OLlN0YW5kYXJkTWF0ZXJpYWwoXCJ0ZXh0dXJlUGxhbmVcIiwgdGhpcy5fb3B0cy5fc2NlbmUpO1xuXHRcdGlmKHRoaXMuX29wdHMuX3RleHR1cmUgIT0gbnVsbCl7XG5cdFx0XHR0aGlzLm9iai5kaWZmdXNlVGV4dHVyZSA9IHRoaXMuX29wdHMuX3RleHR1cmU7XG5cdFx0XHR0aGlzLm9iai5kaWZmdXNlVGV4dHVyZS51U2NhbGUgPSB0aGlzLl9vcHRzLl91U2NhbGU7Ly9SZXBlYXQgNSB0aW1lcyBvbiB0aGUgVmVydGljYWwgQXhlc1xuXHRcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUudlNjYWxlID0gdGhpcy5fb3B0cy5fdlNjYWxlOy8vUmVwZWF0IDUgdGltZXMgb24gdGhlIEhvcml6b250YWwgQXhlc1xuXHRcdFx0dGhpcy5vYmouYmFja0ZhY2VDdWxsaW5nID0gdGhpcy5fb3B0cy5fYmFja0ZhY2VDdWxsaW5nOy8vQWx3YXlzIHNob3cgdGhlIGZyb250IGFuZCB0aGUgYmFjayBvZiBhbiBlbGVtZW50XG5cdFx0XHR0aGlzLm9iai5kaWZmdXNlVGV4dHVyZS52T2Zmc2V0ID0gdGhpcy5fb3B0cy5fdk9mZnNldDsvL1ZlcnRpY2FsIG9mZnNldCBvZiAxMCVcbiAgICBcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUudU9mZnNldCA9IHRoaXMuX29wdHMuX3VPZmZzZXQ7Ly9Ib3Jpem9udGFsIG9mZnNldCBvZiA0MCVcbiAgICBcdFx0dGhpcy5vYmouZGlmZnVzZVRleHR1cmUuaGFzQWxwaGEgPSB0aGlzLl9vcHRzLl9oYXNBbHBoYTtcblx0XHR9XG5cdFx0XG5cdFx0XG4gICAgXHRpZih0aGlzLl9vcHRzLl9kaWZmdXNlQ29sb3IgIT0gbnVsbCl7XG4gICAgXHRcdHRoaXMub2JqLmRpZmZ1c2VDb2xvciA9dGhpcy5fb3B0cy5fZGlmZnVzZUNvbG9yO1xuICAgIFx0fVxuXHR9XG5cbn1cbm1vZHVsZS5leHBvcnRzID0gY19tYXRlcmlhbDsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=