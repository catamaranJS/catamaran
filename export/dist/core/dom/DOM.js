"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),DOM=function(){function e(t){_classCallCheck(this,e);var n=document.querySelectorAll(t);this.length=n.length,this.children=[],navigator.userAgent.indexOf("Chrome")>-1?Object.assign(this,Array.prototype.slice.call(n)):Object.assign(this,n)}return _createClass(e,[{key:"each",value:function(e){var t=!0,n=!1,i=void 0;try{for(var s,r=Array.from(this)[Symbol.iterator]();!(t=(s=r.next()).done);t=!0){var a=s.value;e.call(a)}}catch(u){n=!0,i=u}finally{try{!t&&r["return"]&&r["return"]()}finally{if(n)throw i}}return this}},{key:"append",value:function(e){return this.each(function(){this.appendChild(e)})}},{key:"text",value:function(e){return this.each(function(){this.innerHTML=e})}},{key:"hide",value:function(){return this.each(function(){this.style.display="none"})}},{key:"show",value:function(){return this.each(function(){this.style.display="block"})}},{key:"onVisible",value:function(e){return this.each(function(){if(CATAMARAN.core.DOM.isVisible(this))e.call(this);else var t=setInterval(function(){CATAMARAN.core.DOM.isVisible(this)&&(e.call(this),clearInterval(t))},50)})}},{key:"addClass",value:function(e){return this.each(function(){this.classList.add(e)})}},{key:"removeClass",value:function(e){return this.each(function(){this.classList.remove(e)})}},{key:"hasClass",value:function(e){return this[0].classList.contains(e)}},{key:"toggle",value:function(e){var t=this;return this.each(function(){this.classList.contains(e)?t.removeClass(e):t.addClass(e)})}},{key:"on",value:function(e,t){return this.each(function(){this.addEventListener(e,t,!1)})}},{key:"off",value:function(e,t){return this.each(function(){this.removeEventListener(e,t,!1)})}},{key:"width",value:function(){var e=arguments.length<=0||void 0===arguments[0]?null:arguments[0],t=e;return null==t?this[0].offsetWidth:this.each(function(){this.style.width=t})}},{key:"height",value:function(){var e=arguments.length<=0||void 0===arguments[0]?null:arguments[0],t=e;return null==t?this[0].offsetHeight:this.each(function(){this.style.height=t})}},{key:"css",value:function(e){var t=e;return this.each(function(){for(var e in t)this.style[e]=t[e]})}}],[{key:"isVisible",value:function(e){return e.offsetWidth>0&&e.offsetHeight>0}}]),e}();exports.DOM=DOM;
//# sourceMappingURL=data:application/json;base64,